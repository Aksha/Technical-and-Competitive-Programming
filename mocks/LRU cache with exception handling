/**
What is LRU Cache? 
  Cache expiration vs Cache eviction?
  LRUCache(int capacity)int get(int key)void put(int key, int value)
  cache evictions only
  lru = LRUCache(2) capacity = 2set(1,1) = LRU cache{1}set 2,2 = {1,2}set(3,3) = {2,3}
  get(1) = not present.get(2) = 2 lru cache = {3,2}
  hashmap unordered_map = cache key, position of the element in the list (O(1))unordered_map <key, value> cache= 1 -> 1 value(address)list = key and value
*/
#include <iostream>
#include <cmath>
#include <cstdio>
#include <string>
#include <list>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <exception>
using namespace std;

typedef list<pair<int,int>> li;

class myexception: public exception {   
  virtual const char* what() const throw() { 
    return "the key does not exist";   
  }   
}myex;


class LRUcache {
private:
  int capacity;    
  unordered_map<int,li::iterator> cache;    
  li ordering;     
  li::iterator address;        
 public:    
  LRUcache(int cap) {        
    capacity = cap;    
  }
  void set(int key, int value) {        
    if(cache.find(key) != cache.end()) {            
      address = cache[key];            
      ordering.erase(address);            
      cache.erase(key);        
     }        
    else {            
        if(cache.size() == capacity) {                
          cache.erase(ordering.back().first);                
          ordering.pop_back();            
        }        
     }        
     ordering.push_front(make_pair(key,value));        
     cache[key] = ordering.begin();    
   }                 
   int get(int key) {        
    if(cache.find(key) == cache.end()) {               
      throw myex;        
    }        
    else {            
      address = cache[key];            
      int value = address->second;            
      ordering.erase(address);            
      ordering.push_front(make_pair(key,value));            
      cache[key] = ordering.begin();            
      return value;        
     }    
    }
  };

int main() {   
  LRUcache obj(2);    
  obj.set(1,1); // lru cache = {1}    
  obj.set(2,2); //{1,2}    
  int value = obj.get(1); //return 1 and changes ordering : {2,1}   
  cout << " The value of the get is : " << value << endl;    
  obj.set(3,3); //{1,3}     
  try {        
    value = obj.get(2); // no such key exists    
  }    
  catch(exception& e) {        
    cout << e.what() << endl;    
  }    
  return 0; 
}
