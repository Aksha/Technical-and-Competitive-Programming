/*

Given an array and a starting index, I can jump a[i] positions forward and backward. Figure out if I'd get stuck in an infinite loop or not.
I don't get stuck in an infinite loop if I am able to reach 0.
arr = [1, 3, 2, 0, 4, 2, 1]
startIndex = 0 return false
startINdex = 2 return false
startIndex = 1 return false
startIndex = 5 return true;

arr [2,2,3,0,4,5,4,0,2]


You can move a[i] positions forward or backward. 

[1,0,1]

starting index = 0; return true;

[0,1,2,3] starting index = 0; return true

[3,2,0,2,1] startingIndex = 0; return false because I'm stuck in an infinite loop




*/
bool findZero(vector <int> input, int startIndex){
    if(input[startIndex] == 0)
        return true;
    int length = input.size(); 
    vector <int> flag(length,0); 
    int position1 = startIndex - input[startIndex];
    int position2 = startIndex + input[startIndex];
    return findZero_helper(input,int position1, int position2, flag);     
}

bool findZero_helper(vector <int> input, int pos1, int pos2, vector <int> flag ){
    if(flag[pos1] != 1 && pos1 >= input[0]){
        int val = input[pos1];
        if(val == 0)
            return true;
    }
    else
        findZero_helper(input,pos1-input[pos1], pos1 + input[pos1], flag);
    
    if(flag[pos2] != 1 && pos2 < length){
    int val = input[pos2];
        if(val == 0)
            return true;
    }
    else
       findZero_helper(input,pos2-input[pos2], pos2 + input[pos2],flag);

    return false;
}
 
