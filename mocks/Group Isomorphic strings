Solution 1 : The below solution takes O(n^2*m) time in the worst case.

#include <iostream>
#include <unordered_set>
#include <unordered_map>
#include <vector>

using namespace std;

bool checkSimilarity(string s1, string s2) {
  unordered_map<char,char> comparison;
  for(int i = 0; i < s1.size(); i++) {
    if(comparison.find(s1[i]) == comparison.end() && comparison.find(s2[i]) == comparison.end()) {
      comparison.insert(make_pair(s1[i], s2[i]));
      comparison.insert(make_pair(s2[i], s1[i]));
    }
    else if((comparison.find(s1[i]) == comparison.end() && comparison.find(s2[i]) != comparison.end()) || (comparison.find(s2[i]) == comparison.end() && comparison.find(s1[i]) != comparison.end())){
      return false;
    }
    else if(comparison[s1[i]] != s2[i] || comparison[s2[i]] != s1[i]) {
        return false;
    }
  }
 return true;
}


vector<unordered_set<string>> similar_group(vector<string> arr) {
  vector<unordered_set<string>> result;
  unordered_set<string> similar_visited;
  for(int i = 0; i < arr.size(); i++) {
    string curr_string = arr[i]; //cat
    if(similar_visited.find(curr_string) != similar_visited.end())
      continue;
    unordered_set<string> temp;
    temp.insert(curr_string); // temp = {cat}
    for(int j = i+1;  j < arr.size(); j++) {
      if(j == i)
        continue;
      string comp_string = arr[j];
      if(curr_string.size() != comp_string.size()) {
        continue;
      }
      if(similar_visited.find(comp_string) != similar_visited.end()) {
        continue;
      }
      if(checkSimilarity(curr_string,comp_string)) {
        temp.insert(comp_string);
        similar_visited.insert(comp_string);
        similar_visited.insert(curr_string);
      }
    }
    result.push_back(temp);
  }
  return result;
}

int main() {
  vector<string> arr = {"cat", "aabbcc", "mom", "dog", "dad", "xxyyzz", "aaaabb", "nap", "tat"};
  vector<unordered_set<string>> result = similar_group(arr);
  for(int i = 0; i < result.size(); i++) {
    for(auto it = result[i].begin(); it != result[i].end(); ++it) {
      cout << *it << ", ";
    }
    cout << endl;
  }
  return 0;
}

Solution 2: The below solution takes O(nm) time in the worst case where n is the number of strings and m is the length of the largest string.

#include <iostream>
#include <unordered_set>
#include <unordered_map>
#include <vector>

using namespace std;

unordered_map<long long int, vector<string>> group_isomorphic_string(vector<string> arr) {
    unordered_map<long long int, vector<string>> index_pattern;
    for(int i = 0; i < arr.size(); i++) {
        long long int curr_pattern = 0;
        unordered_map<char,int> curr_index;
        for(int j = 0; j < arr[i].size(); j++) {
            if(curr_index.find(arr[i][j]) != curr_index.end()) {
                curr_pattern = curr_pattern*10 + curr_index[arr[i][j]];
            }
            else {
                if(curr_pattern == 0) {
                    curr_pattern = j+1;
                }
                else {
                    curr_pattern = curr_pattern*10 + j+1;
                }
                curr_index.insert(make_pair(arr[i][j],j+1));
            }
        }
        if(index_pattern.find(curr_pattern) != index_pattern.end()) {
            index_pattern[curr_pattern].push_back(arr[i]);
        }
        else {
            vector<string> temp = {arr[i]};
            index_pattern.insert(make_pair(curr_pattern,temp));
        }
    }
    return index_pattern;
}


int main() {
    vector<string> arr = {"cat", "aabbcc", "mom", "dog", "dad", "xxyyzz", "aaaabb", "nap", "tat"};
    unordered_map<long long int, vector<string>> result = group_isomorphic_string(arr);
    for(auto it = result.begin(); it != result.end(); ++it) {
        vector<string> curr_set = it->second;
        for(int j = 0; j < curr_set.size(); j++) {
            cout << curr_set[j] << " ";
        }
        cout << endl;
    }
    return 0;
}
