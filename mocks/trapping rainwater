Approach 1: Brute force

For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to 
the minimum of maximum height of bars on both the sides minus its own height.

Algorithm :

Initialize ans=0ans=0
Iterate the array from left to right:
Initialize left_max=0 and right_max=0
Iterate from the current element to the beginning of array updating:
{left\_max}=max(left_max,height[j]); left_max=max(left_max,height[j])
Iterate from the current element to the end of array updating:
right_max = max(right,height[j]); right_max=max(right_max,height[j])
Add min(left_max,right_max) - height[i] to ans

Complexity Analysis

Time complexity: O(n^2) as we iterate the left and right parts.

Space complexity: O(1) extra space.

Approach 2 : Dynamic Programming:
In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. These values could be stored. Voila, dynamic programming.

Dynamic programming

Algorithm

Find maximum height of bar from the left end upto an index i in the array \text{left\_max}left_max.
Find maximum height of bar from the right end upto an index i in the array \text{right\_max}right_max.
Iterate over the \text{height}height array and update ans:
Add \min(\text{left\_max}[i],\text{right\_max}[i]) - \text{height}[i]min(left_max[i],right_max[i])âˆ’height[i] to \text{ans}ans

int trap(vector<int>& height)
{
	if(height == null)
		return 0;
    int ans = 0;
    int size = height.size();
    vector<int> left_max(size), right_max(size);
    left_max[0] = height[0];
    for (int i = 1; i < size; i++) {
        left_max[i] = max(height[i], left_max[i - 1]);
    }
    right_max[size - 1] = height[size - 1];
    for (int i = size - 2; i >= 0; i--) {
        right_max[i] = max(height[i], right_max[i + 1]);
    }
    for (int i = 1; i < size - 1; i++) {
        ans += min(left_max[i], right_max[i]) - height[i];
    }
    return ans;
}


Approach 3: O(n) time and O(1) space:

int trap(vector<int>& height)
{
    int left = 0, right = height.size() - 1;
    int ans = 0;
    int left_max = 0, right_max = 0;
    while (left < right) {
        if (height[left] < height[right]) {
            height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
        }
        else {
            height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
        }
    }
    return ans;
}
