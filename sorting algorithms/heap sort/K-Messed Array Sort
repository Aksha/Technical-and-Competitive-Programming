
Given an array of integers arr where each element is at most k places away from its sorted position, code an efficient function sortKMessedArray that sorts arr. For instance, for an input array of size 10 and k = 2, an element belonging to index 6 in the sorted array will be located at either index 4, 5, 6, 7 or 8 in the input array.

Analyze the time and space complexities of your solution.

Example:

input:  arr = [1, 4, 5, 2, 3, 7, 8, 6, 10, 9], k = 2

output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Constraints:

[time limit] 5000ms

[input] array.integer arr

1 ≤ arr.length ≤ 100
[input] integer k

1 ≤ k ≤ 20
[output] array.integer

Discussion: There are many ways to solve this problem. If you're thinking in terms of inserting sort, that's probably the right way to begin with. 
So, insertion sort is O(nk) for this problem. This question is mainly designed to test your strength with sorting algorithms.
There are better sorting algorithms like merge sort, quick sort whose complexity is better than an insertion sort for most cases (Onlogn)
This problem can be solved by using heaps more efficiently

-------------------------------------------------------------------------------------------------------------------------------
Solution: time complexity O(nlogk) where n is the size of the input and 'k' is from the question. 
-------------------------------------------------------------------------------------------------------------------------------

If we use min heap, we can get an asymptotically we can solve this problem in O(N⋅log(K)). 

The idea is to construct a min-heap of size k+1 and insert first k+1 elements into the heap. 
Then we remove min from the heap and insert next element from the array into the heap and and continue the 
process until both array and heap are exhausted.
Each pop operation from the heap should insert the corresponding top element in its correct position in the array.

Time Complexity: building a heap takes O(K) time for K+1 elements. Insertion into and extraction from the min-heap 
take O(log(K)), each. Across all three loops, we do at least one of these actions N times, so the total time complexity
is O(N⋅log(K)). if K is substantially smaller than N, then we can consider log(K) constant and argue that the complexity
is practically linear.

Space Complexity: we need to a maintain min-heap of size K+1 throughout the algorithm, so the auxiliary space complexity 
is O(K).

Code
