
Given an array of integers arr where each element is at most k places away from its sorted position, code an efficient function sortKMessedArray that sorts arr. For instance, for an input array of size 10 and k = 2, an element belonging to index 6 in the sorted array will be located at either index 4, 5, 6, 7 or 8 in the input array.

Analyze the time and space complexities of your solution.

Example:

input:  arr = [1, 4, 5, 2, 3, 7, 8, 6, 10, 9], k = 2

output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Constraints:

[time limit] 5000ms

[input] array.integer arr

1 ≤ arr.length ≤ 100
[input] integer k

1 ≤ k ≤ 20
[output] array.integer

Discussion: There are many ways to solve this problem. If you're thinking in terms of inserting sort, that's probably the right way to begin with. 
So, insertion sort is O(n^2). This question is mainly designed to test your strength with sorting algorithms.
There are better sorting algorithms like merge sort, quick sort whose complexity is better than an insertion sort for most cases (Onlogn)
This problem can be solved by using heaps more efficiently

-------------------------------------------------------------------------------------------------------------------------------
Solution: time complexity O(nlogk) where n is the size of the input and k is the size of the min heap. 
-------------------------------------------------------------------------------------------------------------------------------

