Class Minheap{
    constructor(){
        this.storage = [];
    }
    
    peak(){
        return this.storage[0];
    }
    
    size(){
        return this.storage.length;
    }
    
    swap(i1, i2){
        [this.storage[i1], this.storage[i2]] = [this.storage[i2], this.storage[i1]];
    }
    
    insert(val){
        this.storage.push(val);
        this.bubbleUp(this.size() - 1);
    }
    
    getParent(child){
        if (child % 2 === 0){
            return (child - 2) / 2;
        } else {
            return (child - 1) / 2;
        }
    }
    
    bubbleUp(child){
        let parent = this.getParent(child);
        
        while (child > 0 && this.storage[child] < this.storage[parent]){
            this.swap(child, parent);
            child = parent
            parent = this.getParent(child);
        }
    }
    
    removePeak(){
        this.swap(0, this.size() - 1);
        let result = this.storage.pop();
        this.bubbleDown(0);
        return result;
    }
    
    getChild(parent){
        let child1 = 2 * parent + 1;
        let child2 = 2 * parent + 2;
        
        if (child1 >= this.size()){
            return child1;
        } else if (child2 >= this.size()){
            return child1;
        } else if (this.storage[child1] < this.storage[child2]){
            return child1;
        } else {
            return child2;
        }
    }
    
    bubbleDown(parent){
        let child = this.getChild(parent);
        
        while (child < this.size() && this.storage[parent] > this.storage[child]){
            this.swap(child, parent);
            parent = child
            child = this.getChild(parent);
        }
    }
    
    remove(){
        
    }
    
}


let test = new Minheap();

// test.storage = [5,6,7,8,9]

test.insert(5);
test.insert(8);
test.insert(1);
test.insert(10);
test.insert(7);
test.insert(12);
test.insert(9);
test.insert(2);

console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);



let test = new Minheap();

// test.storage = [5,6,7,8,9]

test.insert(5);
test.insert(8);
test.insert(1);
test.insert(10);
test.insert(7);
test.insert(12);
test.insert(9);
test.insert(2);

console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);
console.log(test.removePeak());
console.log(test);

Console:
W
 _  _   _/_  _  _   _/
/_ /_//_//_'/_//_|/_/
           /
----------------------
Data on this terminal can be erased at any time.
Only the content in the editor is persistent.
Got bugs or suggestions? Tell us: support@remoteinterview.io
----------------------
Minheap { storage: [ 1, 2, 5, 7, 8, 12, 9, 10 ] }
1
Minheap { storage: [ 2, 7, 5, 10, 8, 12, 9 ] }
2
Minheap { storage: [ 5, 7, 9, 10, 8, 12 ] }
5
Minheap { storage: [ 7, 8, 9, 10, 12 ] }
7
Minheap { storage: [ 8, 10, 9, 12 ] }
8
Minheap { storage: [ 9, 10, 12 ] }
9
Minheap { storage: [ 10, 12 ] }
10
Minheap { storage: [ 12 ] }
12
Minheap { storage: [] }
