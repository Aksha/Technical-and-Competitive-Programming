Without hashmap solution: 
#include <iostream>
#include <string>
#include <cstddef>

using namespace std;

char FirstNotInOrder(string str){
   if(str.size() <2)
       return '\0';
   std::size_t found = str.find_first_not_of("abcdefghijklmnopqrstuvwxyz ");
   if (found != std::string::npos)
       return '\0';
   for(int i = 0; i < str.size()-1; i++){
       if(str[i+1] - str[i] < 0) {
           cout << "I'm here" << str[i+1] - str[i] << endl;
           return str[i+1];
       }
   }
   return '\0';
}

int main() {
   string str = "beehive";
   char result = FirstNotInOrder(str);
   cout << result << endl;
   return 0;
}


Test cases:
BEEHIVE -> E  // duplicate char
ZAA -> A  // edge case, starts with last letter (Z)
Z -> " "  // edge case, 1-character
"" -> " "  // edge case, zero-length input
ZZZ...ZZZY -> Y (a million Z's)
ABCDEF -> ""  // all in order

Negative/malicious test cases:
123  // numbers
symbols, non-alphabetic
