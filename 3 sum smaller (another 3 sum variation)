Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n^2) runtime?

Sort nums first and then fix the left index (i) at each time while adjusting the middle and right indexes (j, k). The following code should be self-explanatory.

复制代码
 1 class Solution {
 2 public:
 3     int threeSumSmaller(vector<int>& nums, int target) {
 4         sort(nums.begin(), nums.end());
 5         int n = nums.size(), ans = 0, i, j, k;
 6         for (int i = 0; i < n - 2; i++) {
 7             int j = i + 1, k = n - 1;
 8             while (j < k) {
 9                 if (nums[i] + nums[j] + nums[k] >= target) k--;
10                 else {
11                     ans += (k - j);
12                     j++;
13                 }
14             }
15         }
16         return ans;
17     }
18 };
