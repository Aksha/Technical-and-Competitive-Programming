/*
    Fill the Sudoku solver
    
    9 rows 9 cols
    
  
    
    3 4 5 1 2 7 8 6 9 
    6 7 1 3 4 5 7 2 
    0 2 0 0 0 0 0 0 3
    0 0 0 4 0 0 0 0 0
    0 0 0 0 5 0 0 0 0 
    0 0 0 0 0 9 0 0 0 
    0 0 0 0 0 0 0 7 0
    0 0 0 0 0 6 0 0 0
*/

#include <iostream>
#include <vector>

using namespace std;

bool check(vector<vector<int>> board, int i, int j, int val) {
    int row = i - i%3;
    int col = j - j%3;
    for(int a = 0; a <= 8; a++) {
        if(board[a][j] == val)
            return false;
    }
    for(int a = 0; a <= 8; a++) {
        if(board[i][a] == val)
            return false;
    }
    for(int a = 0; a < 3; a++) {
        for(int b = 0; b < 3; b++) {
            if(board[row+a][col+b] == val)
                return false;
        }
    }
    return true;
}

bool sudokuSolver(vector<vector<int>> &board, int i, int j) {
    if(i == 9) return true;
    if(j == 9) return sudokuSolver(board,i+1,0);
    if(board[i][j] != 0) {
        return sudokuSolver(board,i,j+1);
    }
    for(int k = 1; k <= 9; k++) {
        if(check(board,i,j,k)){
            board[i][j] = k;
            if(sudokuSolver(board,i,j+1)){
                return true;
            }
            board[i][j] = 0;
        }
    }
    return false;
}

 /* 3 4 5 1 6 7 8 2 9
    2 1 6 4 5    
    0 0 0 0 0 3 0 0 6 */
        
int main() {
    vector<vector<int>> board = {{}};
    int i = 0;
    int j = 0;
    bool result = sudokuSolver(board,i,j);
    
    cout << result << endl;
}
    
//    board = {{}}, i = 0; j = 0
