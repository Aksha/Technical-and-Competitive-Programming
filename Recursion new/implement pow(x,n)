Brute force solution:

class Solution {
public:
    double myPow(double x, int n) {
        bool positive = false;
        if(n == 0) {
            return 1;
        }
        else if(n > 0) {
            positive = true;
        }
        else if(n < 0) {
            positive = false;
        }
        double result = 1;
        int i = 1;
        double temp_result = 1;
        if(positive) {
            while(i <= n) {
                result *= x;
                i++;
            }
        }
        else if(!positive) {
            while(i <= n*-1) {
                temp_result *= x;
                i++;
                cout << temp_result;
            }
            result = 1/temp_result;
        }
        return result;
    }
    
    public double myPow(double x, int n) {
        if(n==0) return 1;
        if(n==1) return x;
        boolean isNegative=false;
        if(n<1) {
            x=1/x;
        }
        return powRecurse(x,n);
    }
    public double powRecurse(double x, int n) {
        if(n==0) return 1;
        if(n==1) return x;
        double half= powRecurse(x,n/2);
        if(n%2==0) {
            return half*half;
        }else {
            return half*half*x;
        }
        
    }
};
