Imitate facebook. 
Return no. of friends every time it is refreshed.
Imitate google docs. 100 instances on 100 computers. Multiple documents per instance. Multiple users per doc.
Quick tip: System design for facebook and google should be studied and practiced.

/*
We are designing a 2D game and we have a game map that we represent by an integer matrix. For now, each cell can be a wall (denoted by -1) or a blank space (0).

board = [
  [0,  0,  0, -1, -1],
  [0,  0, -1,  0,  0],
  [0, -1,  0, -1,  0],
  [0,  0, -1,  0,  0],
  [0,  0,  0,  0,  0],
  [0,  0,  0,  0,  0],
  [0,  0,  0,  0,  0],
]

The player can move 1 space at a time up, down, left, or right. The player can't go through walls or land on a wall, or go through the edges of the board.

Write a function that, given a board and a player starting position (represented as a row-column pair), returns all of the possible next positions for the player.

Sample inputs (board, starting_position) and outputs (in any order):

findLegalMoves(board, (3, 1)) =>
  (3, 0), (4, 1)

findLegalMoves(board, (5, 3)) =>
  (5, 2), (5, 4), (4, 3), (6, 3)

findLegalMoves(board, (5, 1)) =>
  (6, 1), (4, 1), (5, 0), (5, 2)

findLegalMoves(board, (6, 0)) =>
  (5, 0), (6, 1)

findLegalMoves(board, (6, 4)) =>
  (5, 4), (6, 3)

findLegalMoves(board, (0, 0)) =>
  (0, 1), (1, 0)

findLegalMoves(board, (2, 2)) =>
  [empty]

Sample algo: 
1. call function findLegalMoves
2. check check boundary conditions and legal condition for every move call recursively, return row and column. 
3. do it for left right bottom and upper elements.
*/

#include <iostream>
#include <vector>

using namespace std;

bool isValid (vector <vector<int>> board, int row, int column){
  if(row >= 0 && row < board.size() && column >= 0 && column < board[0].size()) {
    return true;
  }
  return false;
}

vector<pair <int,int>> findLegalMoves_helper(vector <vector<int>> board, int row, int column,vector<pair <int,int>> result){
  if(isValid(board, row-1, column) && board[row-1][column] != -1) {
      result.push_back(make_pair(row-1,column));
  }
  if(isValid(board, row, column-1) && board[row][column-1] != -1) {
      result.push_back(make_pair(row,column-1));
  }
  if(isValid(board, row+1, column) && board[row+1][column] != -1) {
      result.push_back(make_pair(row+1,column));
  }
  if(isValid(board, row, column+1) && board[row][column+1] != -1) {
      result.push_back(make_pair(row,column+1));
  }
  return result;
}

vector<pair <int,int>> findLegalMoves(vector<vector<int>> board, vector<int> start) {
  int row = start[0];
  int column = start[1];
  vector<pair <int,int>> result;
  return findLegalMoves_helper(board, row, column, result); 
}

int main() {
  vector<vector<int>> board = {
    {0,  0,  0, -1, -1},
    {0,  0, -1,  0,  0},
    {0, -1,  0, -1,  0},
    {0,  0, -1,  0,  0},
    {0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0},
  };
  vector<pair <int,int>> result;
  vector<int> start2 = {5, 3};
  vector<int> start3 = {5, 1};
  
  vector<int> start4 = {6, 0};
 
  vector<int> start5 = {6, 4};
  
  vector<int> start6 = {0, 0};
 
 
  vector<int> start7 = {2, 2};
   
  result = findLegalMoves(board, start7);
  for (int i = 0; i < result.size(); i++) {
    cout << result[i].first << " " << result[i].second << endl;
  }
  
  
  return 0;
}

