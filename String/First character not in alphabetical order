Write a C++ function that, given a character string, finds the first character not in alphabetical order. 
For example, if the string "BEEHIVE" is supplied, the first character out of alphabetical order is the final "E".

  FBF  FZF

FirstNotInOrder(BEEHIVE) -> "E"
FirstNotInOrder(ABCDEFZGHI) -> "G"
FirstNotInOrder(ZA) -> "A"

lexicographic map : {a,0}, {b,1}, {c,2}, …{z,25}; 
Imagine there is a global method that generates A to Z as a string in lexicographical order and stores it in a string variable stringAZ.

char FirstNotInOrder(string str){
  if(str.size() <2)	
      return “”;
  auto i = str.first_find_not_of(“A….Z”);
  if(i != 0)
	return “Error in the input”;
  unordered_map<char,int> lexicographic;
  for(int i= 0; i < stringAZ.size(); i++){
	lexicographic[stringAZ[i]] = i; 	
  }
  for(int i = 0; i < str.size()-1; i++){
    if(lexicographic(str[i+1]) - lexicographic(str[i]) < 0) { // E - B 4-1
      return str[i+i];
    } 
  }
  return “”;
}

char FirstNotInOrder(string str) {...}

Test cases:
BEEHIVE -> E  // duplicate char
ZAA -> A  // edge case, starts with last letter (Z)
Z -> " "  // edge case, 1-character
"" -> " "  // edge case, zero-length input
ZZZ...ZZZY -> Y (a million Z's)
ABCDEF -> ""  // all in order

Negative/malicious test cases:
123  // numbers
symbols, non-alphabetic

A more efficient solution to this would be using Binary Search: O(logn) but this is an incomplete solution and I have my doubts.
Ask questions like 
1. If the input has both upper and lowercases characters. (Lowercase characters has higher ascii values btw)
2. does the input contain symbols, numbers, etc.

char First_Char_Not_In_Order(string str){
	if(str.size() < 2)	
		return "";
	int index = find_first_not_of("ABCDEFGH.....XYZ");
	if(index != 0)
		return "Invalid Input";
	int n = str.size();
	int start = 0;
	int end = n-1;
	char element = binarySearch(str,start,end);
	return element;
}
char binarySearch(str,start,end){
	int mid =  end + (end-start)/2;
	binary_search(str,start,mid); // I am iterating over the elements first and then check the condition because I want to find the first character not in alphabetical order
	binary_search(str,mid,end);
	if((int)str[mid] < (int)str[start])
		return str[mid];
	return "";
	
}

char FirstNotInOrder(string str){
  if(str.size() <2)	
      return “”;
  auto i = str.first_find_not_of(“A….Z”);
  if(i != 0)
	return “Error in the input”;
  for(int i = 0; i < str.size()-1; i++){
    if((int)str[i+1] - (int)str[i] < 0) { // E - B 4-1
      return str[i+i];
    } 
  }
  return “”;
}

Without hashmap solution: 
#include <iostream>
#include <string>
#include <cstddef>

using namespace std;

char FirstNotInOrder(string str){
   if(str.size() <2)
       return '\0';
   std::size_t found = str.find_first_not_of("abcdefghijklmnopqrstuvwxyz ");
   if (found != std::string::npos)
       return '\0';
   for(int i = 0; i < str.size()-1; i++){
       if(str[i+1] - str[i] < 0) {
           cout << "I'm here" << str[i+1] - str[i] << endl;
           return str[i+1];
       }
   }
   return '\0';
}

int main() {
   string str = "beehive";
   char result = FirstNotInOrder(str);
   cout << result << endl;
   return 0;
}

