#include <iostream>

using namespace std;

/*
 * Input: text = "abbbc" and pattern = "ab*c"
Output: true
Given pattern string can match:
"ac", "abc", "abbc", "abbbc", "abbbbc", ...

Input: text = "abcdefg" and pattern = "a.c.*.*gg*"
Output: true
 * */

/*bool regular_expression_matcher(string text, string pattern, int i, int j,int m, int n) {
    cout << "text : " << text[i] << " pattern : " << pattern[j] << " pointer text : " << i << " pointer j : " << j << endl;
    if( i == m && j == n) {
        return true;
    }
    else if(i == m && j < n) {
        while(j < n) {
            if(pattern[j] != '*')
                return false;
            else
                j++;
        }
        return true;
    }
    else if(i < m && j == n) {
        if(pattern[j-1] == '*') {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        if(text[i] == pattern[j] || pattern[j] == '.') {
            return regular_expression_matcher(text, pattern, i+1, j+1, m, n);
        }
        *//*else if(pattern[j] == '.') {
            if(j+1 < m && pattern[j+1] != '*') {
                return true;
            }
            else if (j+1 == m) {
                return true;
            }
            else if(j+1 < m && pattern[j+1] == '*') {

            }
        }*//*
        else if(pattern[j] == '*'){
            return regular_expression_matcher(text, pattern, i+1, j, m, n) || regular_expression_matcher(text,pattern,i,j+1,m,n);
        }
    }
    return false;
}*/

bool regular_expression_matcher(string text, string pattern, int textIndex, int patIndex){
    if(textIndex >= text.size()) {
        if (patIndex >= pattern.size()){
            return true;
        }
        else if ((patIndex+1 < pattern.size()) &&  (pattern[patIndex+1] == '*')) {
            return regular_expression_matcher(text, pattern, textIndex, patIndex + 2);
        }
        else {
            return false;
        }
    }

    else if((patIndex >= pattern.length()) && (textIndex < text.length())){
        return false;
    }

// string matching for character followed by '*'
    else if ((patIndex+1 < pattern.length()) && (pattern[patIndex+1] == '*')) {
        if ((pattern[patIndex] == '.') || (text[textIndex] == pattern[patIndex])) {
            return (regular_expression_matcher(text, pattern, textIndex, patIndex + 2) ||
                    regular_expression_matcher(text, pattern, textIndex + 1, patIndex));
        } else {
            return regular_expression_matcher(text, pattern, textIndex, patIndex + 2);
        }
    }

//string matching for '.' or ordinary char.
        else if ((pattern[patIndex] == '.') || (pattern[patIndex] == text[textIndex])) {
            return regular_expression_matcher(text, pattern, textIndex + 1, patIndex + 1);
        }
        else {
            return false;
        }
}

int main() {
    string text = "abcdefg";
    string pattern = "a.c.*.*gg*";
    int i = 0;
    int j = 0;
    int m = text.size();
    int n = pattern.size();
    bool isMatch = regular_expression_matcher(text,pattern,i,j);
    if(isMatch)
        cout << "They are a match" << endl;
    else
        cout << "The text and pattern don't match " << endl;
    return 0;
}
