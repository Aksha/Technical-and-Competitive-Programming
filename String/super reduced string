 Steve has a string, , consisting of  lowercase English alphabetic letters. In one operation, he can delete any pair of adjacent letters with same value. For example, string "aabcc" would become either "aab" or "bcc" after operation.

Steve wants to reduce  as much as possible. To do this, he will repeat the above operation as many times as it can be performed. Help Steve out by finding and printing 's non-reducible form!

Note: If the final string is empty, print Empty String .

Input Format

A single string, .

Constraints

Output Format

If the final string is empty, print Empty String; otherwise, print the final non-reducible string.

Sample Input 0

aaabccddd
Sample Output 0

abd

Solution 1: 

O(nlogn) time if not sorted, O(1) time if sorted and O(1) space
 
Java based solution:

 public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String str = scanner.next();
        for (int i = 1; i < str.length(); i++) {
            if (str.charAt(i) == str.charAt(i-1)) {
                str = str.substring(0, i-1) + str.substring(i+1);
                i = 0;
            }
        }
        if (str.length() == 0) {
            System.out.println("Empty String");
        } else {
            System.out.println (str);
        }
    }
    
 C++ solution:
 string super_reduced_string(string s){
    int i = 1;
    while(i < s.size()){
        if(s[i] == s[i-1] ){
            s = s.substr(0,i-1) + s.substr(i+1);
            i = 0;
        }
        i++;
    }
    if(s.size() == 0)
        return "Empty String";
    else 
        return s;
}
    Solution 2: 
    O(n) time and O(n) space if a hash map is used where the characters are keys and its count are values. Print the characters with odd values.
    
