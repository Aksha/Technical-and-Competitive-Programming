Question:

Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. 
No two characters may map to the same character but a character may map to itself.

For example,
Given "egg", "add", return true.

Given "foo", "bar", return false.

Given "paper", "title", return true.

Note:
You may assume both s and t have the same length.

-----------------------------------------------------------------------------------------------------------------------------------------
Solution: O(n) time complexity and space complexity.
-----------------------------------------------------------------------------------------------------------------------------------------
Solution 1:

bool isIsomorphic(string s, string t) {
    map<char,char> mp1;
    map<char,char> mp2;
    for (int i=0;i<s.size();i++){
        if (mp1.find(s[i])== mp1.end() && mp2.find(t[i]) == mp2.end()){
            mp1[s[i]] = t[i]; 
            mp2[t[i]] = s[i];
        }else{
            if (mp1[s[i]]!=t[i] || mp2[t[i]]!=s[i]){
                return false;
            }
        }
    }
    return true;
 }

Solution 2:
bool isIsomorphic(char* s, char* t) {
	char charArrS[256] = { 0 };
	char charArrT[256] = { 0 };
	int i = 0;
	while (s[i] !=0)
	{
		if (charArrS[s[i]] == 0 && charArrT[t[i]] == 0)
		{
			charArrS[s[i]] = t[i];
			charArrT[t[i]] = s[i];
		}
		else
		if (charArrS[s[i]] != t[i] || charArrT[t[i]] != s[i])
			return false;
		i++;
	}

	return true;
}

Solution 3:

The main idea is to store the last seen positions of current (i-th) characters in both strings. If previously 
stored positions are different then we know that the fact they're occuring in the current i-th position 
simultaneously is a mistake. We could use a map for storing but as we deal with chars which are basically
ints and can be used as indices we can do the whole thing with an array.


class Solution {
public:
    bool isIsomorphic(string s, string t) {
        int m1[256] = {0}, m2[256] = {0}, n = s.size();
        for (int i = 0; i < n; ++i) {
            if (m1[s[i]] != m2[t[i]]) return false;
            m1[s[i]] = i + 1;
            m2[t[i]] = i + 1;
        }
        return true;
    }
};

Solution 4: 
