Sentence Reverse

You are given an array of characters arr that consists of sequences of characters separated by space characters. Each space-delimited sequence of characters defines a word.

Implement a function reverseWords that reverses the order of the words in the array in the most efficient manner.

Explain your solution and analyze its time and space complexities.

WATCH THE HELL OUT FOR "OFF BY 1" ERRORS

Example:

input:  arr = [ 'p', 'e', 'r', 'f', 'e', 'c', 't', '  ',
                'm', 'a', 'k', 'e', 's', '  ',
                'p', 'r', 'a', 'c', 't', 'i', 'c', 'e' ]

output: [ 'p', 'r', 'a', 'c', 't', 'i', 'c', 'e', '  ',
          'm', 'a', 'k', 'e', 's', '  ',
          'p', 'e', 'r', 'f', 'e', 'c', 't' ]


Solution : Time Complexity: O(n) and Space complexity is constant since I am reversing inplace:


#include <iostream>
#include <vector>

using namespace std;

/* arr = [e,c,i,t,c,a,r,p, ,s,e,k,a,m, ,t,c,e,f,r,e,p] 
    
*/

void reverseWords_helper(vector <char> &result, int start, int end){
  while(start < end){
    swap(result[start++], result[end--]);
  }
}

vector <char> helper(vector<char> result, int start, int end){  
  int i = 0;
  while(i <= end){
    if(result[i] == ' ' || i == result.size()){
      end = i -1;
      reverseWords_helper(result, start, end);
      start = i+1;
      end = result.size();
    }
    i++;
  }
  return result;
}


vector<char> reverseWords( const vector<char>& arr )  //because of a "const" vector <int> arr, I can't modify a const input. I can do it in-place otherwise
{
  vector <char> result = arr;
  reverseWords_helper(result, 0, arr.size() - 1);  // reverse the sentence
  return helper(result, 0, result.size());
}
  

int main() {
  return 0;
}
