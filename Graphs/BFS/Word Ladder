Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that only one letter can be changed at a time and each intermediate word must exist in the dictionary. For example, given:

start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
One shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "log", the program should return its length 5.

Thoughts:

This should be a shortest path problem: if two words have a common character, they are connected by an edge. 
The weight of the edge is the number of characters in common. So the problem becomes shortest path problem. 
(refer to the word ladder diagram)
-----------------------------------------------------------------------------------------------------------------------------------------
Solution: O(number of words + length of the words), space O(n) considering
------------------------------------------------------------------------------------------------------------------------------------------


class WordNode{
    String word;
    int numSteps;
 
    public WordNode(String word, int numSteps){
        this.word = word;
        this.numSteps = numSteps;
    }
}
 
public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
        Queue<WordNode> queue = new LinkedList<WordNode>();
        queue.add(new WordNode(beginWord, 1));
 
        wordDict.add(endWord);
 
        while(!queue.isEmpty()){
            WordNode top = queue.remove();
            String word = top.word;
 
            if(word.equals(endWord)){
                return top.numSteps;
            }
 
            char[] arr = word.toCharArray();
            for(int i=0; i<arr.length; i++){
                for(char c='a'; c<='z'; c++){
                    char temp = arr[i];
                    if(arr[i]!=c){
                        arr[i]=c;
                    }
 
                    String newWord = new String(arr);
                    if(wordDict.contains(newWord)){
                        queue.add(new WordNode(newWord, top.numSteps+1));
                        wordDict.remove(newWord);
                    }
 
                    arr[i]=temp;
                }
            }
        }
 
        return 0;
    }
}


C++ version:
BFS implementation of finding the pathLength.

class WordNode{
  private:
    String word;
    int numSteps;
    
  public:
    WordNode(String word, int numSteps){
        this.word = word;
        this.numSteps = numSteps;
    }
    
    int ladderLength(String beginWord, String endWord, Set<string> wordDict) {
        Queue<WordNode> Q;
        WordNode node;
        node.word = beginWord
        node.numSteps = 0;
        Q.push(node);
 
        wordDict.insert(endWord);
 
        while(!Q.isEmpty()){
            WordNode top = Q.pop();
            String word = top.word;
 
            if(word == endWord){
                return top.numSteps;
            }
            
            for(int i=0; i< word.size(); i++){
                for(char c='a'; c<='z'; c++){
                    char temp = word[i];
                    if(word[i]!=c){
                        word[i]=c;
                    }
 
                    String newWord = word;
                    if(wordDict.find(newWord) != wordDict.end()){
                        WordNode temp;
                        temp.word = newWord;
                        temp.numSteps = top.numSteps + 1;
                        Q.push(temp);
                        wordDict.erase(newWord); //just so that we don't revisit nodes.
                    }
                    word[i]=temp;
                }
            }
        }
        return 0;
  }
}
