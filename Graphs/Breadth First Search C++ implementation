#) GIven a graph and a single vertex (S), the shortest distance of all reachable vertices from S is computed.  A breadth first tree of all reachable vertices can be produced.

Another important property:  
prints all paths from root to leaf (Facebook interview question)

void BFS(vector<vector<int>> AL, int S) {
	for(int i = 0; i < AL.size(); i++) {
		 color[i] = 0;
		parent[i] = NIL;
		distance[i] = INT_MAX;
}

color[S] = 0;
distance[S] = 0;
parent[S] = NIL;

queue<int> BFS;
BFS.push_back(S);
	
	while(!BFS.empty()) {
		int top = BFS.front();
for(int i = 0; i < AL[top].size(); i++) {
	if(color[AL[top][i]] == 0) {
		color[AL[top][i]] = 1;
		parent[AL[top][i]] = top;
		distance[AL[top][i]] = distance[top]+1;
		BFS.push_back(AL[top][i]);
}
}	
BFS_queue.pop();
color[top] = 2;
}
}

void BFS(vector <vector<int>> AL){
	for(int i = 0; i < AL.size(); i++) {
		if(i == source) {
	color[i] = 1;
	distance[i] = 0;
	pred[i] = NIL;
}
else{
	color[i] = 0;
	distance[i] = INT_MAX;
	pred[i] = NIL;
}

queue <int> BFS;
BFS.push(source);
while(!BFS.empty()){
	int top = BFS.front();
	for(int i = 0; i < AL[top].size();i++) {
		if(color[AL[top][i]] == 0) {
	color[AL[top][i]] = 1; //grey
	distance[AL[top][i]] = distance[top] + 1;
	pred[AL[top][i]] = top;
	BFS.push(AL[top][i]]);
}
}
BFS.pop();
color[top] = 2; //black
}
}
}

Java implementation:

public static List<Integer> bfs(Vertex vertex) {
     //Queue<Vertex> q = new LinkedList<Vertex>();
       
       // intialize a queue, set
       // enqueue root
       
       // looop while the queue is not empty
       // dequeue first element
       // track the element
       // pop off the first element from the queue.
       //check the neighbours of the element that is being tracked.
       //if the neighbour has been visited already, skip it. else add it to the visited set and push it in the queue.
       
       Queue<Vertex> q = new LinkedList<Vertex>();
       HashSet<Integer> visitedSet = new HashSet<Integer>();
       List<Integer> output = new ArrayList<Integer>();
       
       q.add(vertex);
       visitedSet.add(vertex.id);
       
       while (!q.isEmpty()) {
           Vertex current = q.removeFirst();
           
           for (Vertex v : current.edges) {
               if (!visitedSet.contains(v.id)) {
                   q.add(v);
                   visitedSet.add(v.id);
                   output.add(v.id);
               }
           }
       }
       
      
     return output;
   }
