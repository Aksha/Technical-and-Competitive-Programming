C++ Implementation:


https://www.youtube.com/watch?v=4fiDs7CCxkc

The following video helps understand the algorithm to solving this problem: https://www.youtube.com/watch?v=4fiDs7CCxkc 
The time complexity is O(n) or linear as I am traversing through all the nodes in the binary tree.
//You can construct a binary tree given its preorder and inorder traversal list..

Struct Node{
  int data;
  Node* left;
  Node* right;
  
  Node(int val){
    data = val;
    left = NULL;
    right = NULL;
  }
};

Struct MinMax{
    bool isBST;
    int size;
    int min;
    int max;
    
    MinMax() {
      isBST = false;
      size = 0;
      min = INT_MAX;
      max = INT_MIN;
    }
};

int LargestBST(Node* root) {
  MinMax m = largest(root);
  return m->size();
}

MinMax largest(Node* root){
  if(root == NULL){
    MinMax m;
    return m;
  }
  
  //Do a post order traversal
  MinMax leftSubtree = largest(root->left);
  MinMax rightSubtree = largest(root->right);
  
  MinMax m;
  
  //if either of left or right subtree says its not BST or the data
  //of this node is not greater/equal than max of left and less than min of right
  //then subtree with this node as root will not be BST. 
  //Return false and max size of left and right subtree to parent
  if(leftSubtree->isBST == false || rightSubtree->isBST == false || (leftSubtree->max > root->data || rightSubtree->min <= root->data)){
            m->isBST = false;
            m->size = std::max(leftSubtree->size, rightSubtree->size);
            m->min = 0; 
            m->max = 0;
            return m;
  }
  
  //if we reach this point means subtree with this node as root is BST.
  //Set isBST as true. Then set size as size of left + size of right + 1.
  //Set min and max to be returned to parent.
  
    m->isBST = true;
    m->size = leftSubtree->size + rightSubtree->size + 1;

    //if root.left is null then set root.data as min else
    //take min of left side as min
    m->min = root->left != null ? leftSubtree->min : root->data;

    //if root.right is null then set root.data as max else
    //take max of right side as max.
    m->max = root->right != null ? rightSubtree->max : root->data;

    return m;
 }
 
 
