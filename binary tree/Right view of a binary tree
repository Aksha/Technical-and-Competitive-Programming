Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <--- max=3
 \    / \
  5   6  4     <--- max=3
  /
  7       <----- 
      
 {3,null,5,6,4,null,7,null}  /`1,3,
  [1,3,4,7]
  Struct Node{
      int val;
      Node* left;
      Node* right;
  }
  
  vector<int> result;
  int level = 1;
  int max = 0;
  vector <int> rightView(Node* root, int level, int &max){
         if(root == NULL)
             return result;
         if(max<level){
             result.push_back(root->val);    //1,3,4
             max=level;
         }
         rightView(root->right, level+1, max);
         rightView(root->left, level+1, max);  
 }
 ///// My Solution
 class MaxLevel {
    int max_level;
}
public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result =new ArrayList<Integer>();
        if(root==null) return result;
        MaxLevel max = new MaxLevel();
        rightSideViewHelper(root, 1, max,result);
        return result;
    }
    public void rightSideViewHelper(TreeNode root, int level, MaxLevel max, List<Integer>result) {
        if(root==null) return;
        if(max.max_level<level) {
            result.add(root.val);
            max.max_level=level;
        }
        rightSideViewHelper(root.right, level+1,max,result);
        rightSideViewHelper(root.left, level+1, max,result);
    }
  
  
  public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ret = new ArrayList<Integer>();
        if(root == null) return ret;
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        while(!q.isEmpty()){
            int cnt = q.size();
            for(int i = 0;i < cnt;i++){
                TreeNode cur = q.poll();
                if(i == cnt-1){
                    ret.add(cur.val);
                }
                if(cur.left != null){
                    q.offer(cur.left);
                } 
                if(cur.right != null){
                    q.offer(cur.right);
                } 
            }
        }
        return ret;
    }
