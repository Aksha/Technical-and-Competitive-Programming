#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <list>

using namespace std;
/*
 *    1
     / \
    3   5
   / \   \
  2   4   7
 / \   \
9   6   8

1
35
247
968
 *
Algorithm: Breath first search approach

1. Initialize a queue. Add the root node to it.
2. While queue is not empty, look for for the top node's left and right children in the same order.
3. If the left child is not empty, add left child to the queue and right child is not empty, add right child to the queue. Keep track of the level.
4. While printing, print the nodes from the hashmap that keeps track of the level.

*/

/*
Q = {3,5,2,4}
hmap = {{1,1}, {3,2}, {5,2}, {2,3}, {4,3},
*    1
     / \
    3   5
   / \   \
  2   4   7
 / \   \
9   6   8
*/

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

vector<vector<int>> levelOrder(TreeNode* root){
    vector<vector<int>> result;
    vector<int> layer;
    list<TreeNode*> eachLevel;
    list<TreeNode*> temp;
    if(!root)
        return result;
    temp.push_back(root);
    layer.push_back(root->val);
    while(!temp.empty()){
        result.push_back(layer);
        layer.clear();
        eachLevel.clear();
        eachLevel = temp;
        temp.clear();
        for(auto level : eachLevel){
            if(level->left) {
                temp.push_back(level->left);
                layer.push_back(level->left->val);
            }
            if(level->right) {
                temp.push_back(level->right);
                layer.push_back(level->right->val);
            }
        }
    }
    return result;
}


int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(3);
    root->right = new TreeNode(5);
    root->left->left = new TreeNode(2);
    root->left->right = new TreeNode(4);
    root->right->right = new TreeNode(5);
    root->left->left->left = new TreeNode(9);
    root->left->left->right = new TreeNode(6);
    root->left->right->right = new TreeNode(8);
    vector<vector<int>> result;
    result = levelOrder(root);
    for(int i = 0; i < result.size(); i++) {
       for (int j = 0; j < result[i].size(); j++) {
           cout << result[i][j] << " ";
       }
       cout << endl;
    }
    return 0;
}
