#include <iostream>
#include <stack>

/*          1
 *      2          3
 *   5     7          9
 *
 *   // post order traversal: 5, 7, 2, 9, 3, 1
 *   // pre order traversal: 1, 2, 5, 7, 3, 9
 *   // inorder traversal : 5, 2, 7, 1, 3, 9
 *
 * */
using namespace std;

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val) : data(val), left(NULL), right(NULL) {}
};

//post order traversal

void postOrderTraversal(TreeNode* root) {
    if(root == NULL)
        return;
    stack<TreeNode*> s1;
    stack<TreeNode*> s2;
    s1.push(root);

    while(!s1.empty()) {
        TreeNode* node = s1.top();
        s1.pop();
        s2.push(node);
        if(node->left)
            s1.push(node->left);
        if(node->right)
            s1.push(node->right);
    }

    while(!s2.empty()) {
        TreeNode* node = s2.top();
        s2.pop();
        cout << node->data << " ";
    }
    cout << endl;
}

void preOrderTraversal(TreeNode* root) {
    if(root == NULL)
        return;
    stack<TreeNode*> s1;
    s1.push(root);

    while(!s1.empty()) {
        TreeNode* node = s1.top();
        s1.pop();
        cout << node->data << " ";
        if(node->right)
            s1.push(node->right);
        if(node->left)
            s1.push(node->left);
    }
    cout << endl;
}


void inOrderTraversal(TreeNode *root)
{
    stack<TreeNode *> s;
    TreeNode *curr = root;

    while (curr != NULL || s.empty() == false)
    {
        /* Reach the left most Node of the
           curr Node */
        while (curr !=  NULL)
        {
            /* place pointer to a tree node on
               the stack before traversing
              the node's left subtree */
            s.push(curr);
            curr = curr->left;
        }

        /* Current must be NULL at this point */
        curr = s.top();
        s.pop();

        cout << curr->data << " ";

        /* we have visited the node and its
           left subtree.  Now, it's right
           subtree's turn */
        curr = curr->right;

    } /* end of while */
}

int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    TreeNode* Left = root->left;
    root->right = new TreeNode(3);
    TreeNode* Right = root->right;
    Left->left = new TreeNode(5);
    Left->right = new TreeNode(7);
    Right->right = new TreeNode(9);

    cout << "Post order Traversal : " << endl;
    postOrderTraversal(root);

    cout << "Pre order Traversal : " << endl;
    preOrderTraversal(root);

    cout << "Inorder Travesal: " << endl;
    inOrderTraversal(root);
    
    return 0;
}
