Print Nodes in Top View of Binary Tree
3.4
Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. Given a binary tree, print the top view of it. The output nodes can be printed in any order. Expected time complexity is O(n)

A node x is there in output if x is the topmost node at its horizontal distance. Horizontal distance of left child of a node x is equal to horizontal distance of x minus 1, and that of right child is horizontal distance of x plus 1.

       1
    /     \
   2       3
  /  \    / \
 4    5  6   7
Top view of the above binary tree is
4 2 1 3 7

        1
      /   \
    2       3
      \   
        4  
          \
            5
             \
               6
Top view of the above binary tree is
2 1 3 6

The idea is to find horizontal distance of each node and store it in a map as key value pair, if the key hasn't been visited before, print it and if the key has been seen already, don't print it.

#include<bits/stdc++.h>
using namespace std;
 
//Structure of binary tree
struct Node
{
    int data;
    struct Node* left, * right;
};
 
void topView(struct Node *root)
{
    if (root == NULL)
        return;
 
    unordered_map<int, int> m;
    queue<pair<Node*, int>> q;
 
    // push node and horizontal distance to queue
    q.push(make_pair(root, 0));
    
    while (!q.empty())
    {
        pair<Node*, int> p = q.front();
        Node *n = p.first;
        int val = p.second;
        q.pop();
        
        if (m.find(val)==m.end())
        {
            m[val] = n->data;
            cout << n->data << endl;
        }
         
        if (n->left != NULL)
            q.push(make_pair(n->left, val-1));
         
        if (n->right != NULL)
            q.push(make_pair(n->right, val+1));
    }
}
 
