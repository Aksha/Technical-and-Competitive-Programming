 A Simple Solution is to traverse the tree. For every traversed node, check if all values under this node 
 are same or not. If same, then increment count. Time complexity of this solution is O(n2).

An Efficient Solution is to traverse the tree in bottom up manner. For every subtree visited, return true 
if subtree rooted under it is single valued and increment count. So the idea is to use count as a reference parameter in recursive calls and use returned values to find out if left and right subtrees are single valued or not.
 
 
     4
  1     4         6
4   4     4     6 6 7
                    7 7 7
                    
For a simple binary tree, the most efficient solution would be to calculate if the left and right subtrees of a root node 
satisfy the unival condition and then check if the tree along with the root node forms a unival tree. If such is the case, 
increment the count by 1. If not, do nothing about it.

bool univalTree(Node* root) {
    int count = 0;
    univalTree_helper(root,count);
    return count;
}

bool univalTree_helper(Node* root, int &count){
    if(root == NULL)
        return true;
       
    int n = root->children.size();
    bool left = univalTree_helper(root->left, count);
    bool right = univalTree_helper(root->right, count);
    
    if(!left || !right)
     return false;
    if(left != NULL && root->left->val != root->val)
     return false;
    if(right != NULL && root->right->val != root->val)
    return false;
    count++;
    
    return true;       
}


Solution for a non binary trees where every node can have n children.


bool univalTree(Node* root) {
    int count = 0;
    univalTree_helper(root,count);
    return count;
}

bool univalTree_helper(Node* root, int &count){
    if(root == NULL)
        return true;
       
    int n = root->children.size();
    for(int i = 0; i < n; i++){
        bool child = univalTree_helper(root->children[i]->left,count);
        if(!child)
            return false;           
        if(child != NULL && root->children[i]->val != root->val)
            return false;
        count++;
    }
    return true;       
}
