Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
    
as "[1,2,3,#,#,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

Solution: 

class Codec {
public:
    string serialize(TreeNode* root) {
        ostringstream out;
        serialize(root,out)
        return out.c_str();
    }
    // Encodes a tree to a single string.
    void serialize(TreeNode* root, ostringstream& out )
    {
        if(root == NULL)
            out << "#";
        out << root->val << ",";
        serialize(root->left,out);
        serialize(root->right,out);
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
      istringstream in(data);
      return deserialize(in);
    }

    TreeNode* deserialize(istringstream in)
    {   
        string val;
        in >> val;
        if(val == "#")
            return NULL;
        TreeNode* node = new TreeNode(stoi(val));
        root->left = deserialize(in);
        root->right = deserialize(in);
        return node;
    }
};
