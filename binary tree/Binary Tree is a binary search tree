#Write a program to find if a binary tree is a binary search tree

Think along the lines that every node in a  BST is always greater than or equal to its left child and lesser than its right child.
Solution:

bool isBST(TreeNode* root){
  int left = INT_MIN;
  int right = INT_MAX;
  return isBST_helper(root, left, right);
}

bool isBST_helper(TreeNode* root, int left, int right){
  if(root == NULL)
    return true;
  if(left != NULL && root->val < left) 
    return false;
  if(right != NULL && root->val > right)
    return false; 
  if(!isBST_helper(root->left,left,root->val) && !isBST_helper(root->right,root->val,right))
    return false;
  return true;
}

The above solution can look at a given node more than once. 

A more efficient approach is to use min and max instead of left and right and update the min and max values with every 
recursion. It looks at each node exactly once. So the run time is linear O(n).

#include<bits/stdc++.h> 
#include<iostream> 
using namespace std; 

/* A binary tree node has data, 
pointer to left child and 
a pointer to right child */
class node 
{ 
	public: 
	int data; 
	node* left; 
	node* right; 
	
	/* Constructor that allocates 
	a new node with the given data 
	and NULL left and right pointers. */
	node(int data) 
	{ 
		this->data = data; 
		this->left = NULL; 
		this->right = NULL; 
	} 
}; 

int isBSTUtil(node* node, int min, int max); 

/* Returns true if the given 
tree is a binary search tree 
(efficient version). */
int isBST(node* node) 
{ 
	return(isBSTUtil(node, INT_MIN, INT_MAX)); 
} 

/* Returns true if the given 
tree is a BST and its values 
are >= min and <= max. */
int isBSTUtil(node* node, int min, int max) 
{ 
	/* an empty tree is BST */
	if (node==NULL) 
		return 1; 
			
	/* false if this node violates 
	the min/max constraint */
	if (node->data < min || node->data > max) 
		return 0; 
	
	/* otherwise check the subtrees recursively, 
	tightening the min or max constraint */
	return
		isBSTUtil(node->left, min, node->data-1) && // Allow only distinct values 
		isBSTUtil(node->right, node->data+1, max); // Allow only distinct values 
} 


/* Driver code*/
int main() 
{ 
	node *root = new node(4); 
	root->left = new node(2); 
	root->right = new node(5); 
	root->left->left = new node(1); 
	root->left->right = new node(3); 
	
	if(isBST(root)) 
		cout<<"Is BST"; 
	else
		cout<<"Not a BST"; 
		
	return 0; 
} 

// This code is contributed by rathbhupendra 
