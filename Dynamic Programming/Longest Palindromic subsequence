
Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
Example 2:
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".

----------------------------------------------------------------------------------------------------------------------
Solution: O(n^2)
Youtube video to understand the problem and its solution: https://www.youtube.com/watch?v=NnD96abizww 
----------------------------------------------------------------------------------------------------------------------
 
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        if (s.empty()) return 0;
        
        vector<vector<int>> longest(s.size(), vector<int>(s.size()));
        for (int len=1; len<=s.size(); len++) {
            for (int i=0; i+len<=s.size(); i++) {
                int j = i+len-1;
                if (i == j) {
                    longest[i][j] = 1;
                } else if (i+1 == j) {
                    longest[i][j] = (s[i] == s[j]) ? 2 : 1;
                } else {
                    longest[i][j] = max(max(longest[i][j-1], longest[i+1][j]), (longest[i+1][j-1] + ((s[i] == s[j]) ? 2 : 0)));
                }
            }
        }  
        return longest[0][s.size()-1];
    }
};
