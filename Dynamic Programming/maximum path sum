Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which maximizes the sum of all numbers along its path.
initial table:
Given input grid:       The sum grid:
5 4 -2 3                5   9  7 10
3 5  2 6                8  14 16 22
9 7  2 1                17 24 26 27
1 3  8 4                18 32 35 39

return m-1, n-1 would return 39.



Solution: O(mn) time complexity and O(mn) space complexity.

int maxPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size(); 
        vector<vector<int> > sum(m, vector<int>(n, 0));
        sum[0][0] = grid[0][0];
        for (int i = 1; i < m; i++)
            sum[i][0] = sum[i - 1][0] + grid[i][0];
        for (int j = 1; j < n; j++)
            sum[0][j] = sum[0][j - 1] + grid[0][j];
        for (int i = 1; i < m; i++)
            for (int j = 1; j < n; j++)
                sum[i][j]  = max(sum[i - 1][j], sum[i][j - 1]) + grid[i][j];
        return sum[m - 1][n - 1];
    }
