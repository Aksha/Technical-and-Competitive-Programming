Deletion Distance

The deletion distance of two strings is the minimum number of characters you need to delete in the two strings in order to get the same string. For instance, the deletion distance between "heat" and "hit" is 3:

By deleting 'e' and 'a' in "heat", and 'i' in "hit", we get the string "ht" in both cases.
We cannot get the same string from both strings by deleting 2 letters or fewer.
Given the strings str1 and str2, write an efficient function deletionDistance that returns the deletion distance between them. Explain how your function works, and analyze its time and space complexities.

Can also be solved using a hash map:

unordered_map<char, int> result where the key is the char you are at and int is the count of it.
use map, handle three different cases with a better time and space complexity of O(m+n) and O(m+n) respectively.
Check out hashmap-set page for the code.
how would you manipulate? the code gets crazier. Here comes dynamic programming to the rescue with a worse time and space complexity.


Examples:

input:  str1 = "dog", str2 = "frog"
output: 3

input:  str1 = "some", str2 = "some"
output: 0

input:  str1 = "some", str2 = "thing"
output: 9

input:  str1 = "", str2 = ""
output: 0

------------------------------------------------------------------------------------------------------------------------------------------------
Solution: Time Complexity: O(n*m)
Space Complexity:O(n*m)
------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <cmath>

using namespace std;

int deletionDistance(string &str1, string &str2) {
  // your code goes here
  int n = str1.size();
  int m = str2.size();
  int dp[n+1][m+1];
  
  for(int i = 0; i <= n; i++){
    dp[i][0] = i;
  }
  
  for(int i = 0; i <= m; i++){
    dp[0][i] = i;
  }
  
  for(int i = 1; i <= n; i++){
    for(int j = 1; j <= m; j++){
      if(str1[i] == str2[j])
        dp[i][j] = dp[i-1][j-1];
      else{
        dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + 1;
      }
    }
  }
  return dp[n][m];
}

int main() {
  string str1 = "dog";
  string str2 = "frog";
  int result = deletionDistance(str1,str2);
  cout << "result is" << result << endl;
  return 0;
}
