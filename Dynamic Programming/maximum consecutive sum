 Problem 1: Max Consecutive Sum
 *
 *  Prompt:    Given an array of integers find the sum of consecutive
 *             values in the array that produces the maximum value.
 *
 *  Input:     Unsorted array of positive and negative integers
 *  Output:    Integer (max consecutive sum)
 *
 *  Example:   input = [6, -1, 3, 5, -10]
 *             output = 13 (6 + -1 + 3 + 5 = 13)
 

Solution: Here's my C++ implementation of this problem. 
--------------------------------------------------------------------------------------------------------------------------------
  // Time Complexity: O(n)
  // Auxiliary Space Complexity: O(n)
  int maxConsecutiveSum(int[] A) {
        int n = A.size();
        vector<int> dp;
        dp[0] = A[0];
        int maximum = dp[0];
        
        for(int i = 1; i < n; i++){
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);
            maximum = std::max(max, dp[i]);
        }
        
        return maximum;
    }

Alternate solution with better space complexity.
// Time Complexity: O(n)
  // Auxiliary Space Complexity: O(n)
int maxConsecutiveSum(int[] A) {
    int maxSoFar=A[0], maxEndingHere=A[0];
    for (int i=1;i<A.size();++i){
    	maxEndingHere= Math.max(maxEndingHere+A[i],A[i]);
    	maxSoFar=Math.max(maxSoFar, maxEndingHere);	
    }
    return maxSoFar;
}
