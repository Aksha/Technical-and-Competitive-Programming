 
int hash (string word) {
    int result = 0;
    for(size_t i = 0; i < word.length(); ++i) {
        result += word[i] * pow(31, i);
    }
    return result;
}
 
 
#define A 54059 /* prime */
#define B 76963 /* prime */
#define C 86969 /* prime */
#define first 37 /* prime */
unsigned hash_str(string s)
{
   unsigned h = first;
   int i = 0;
   length = s.size();
   while (i < length) {
     h = (h * A) ^ (s[i] * B);
     i++;
   }
   return h %. TABLE_SIZE;
}
 

 
I am sending out this e-mail that has both my inference about the question raised by you during our meeting and my next task items. I would like to hear your feedback on my inferences.
 
My inference after pondering/reading on the concepts based on the questions raised by you:
 
The new operator terminates after throwing an instance of bad_alloc() exception.
 
About memory management/allocation:
Const unsigned long long TABLE_SIZE = 1ULL << 34 is 16 billion. Multiplying that by 4 or 8 (the size of pointers on 32 and 64 bit systems respectively) to get the number of bytes needed. Terminating on a bad_alloc() exception would have to mean that the system does not that amount of memory, definitely not as a single contiguous block? There is no work around for a physical limitation of the system except buying more memory. Also, I would like to learn more about freeing up existing unused memory.
 
Here are some better quality hash functions that are not too complicated.. I would appreciate your feedback on which of these could be used as a substitute for existing simple hash function:
 
 
int
hash (string word)
{
  int seed = 131;
  unsigned long hash = 0;
  for(int i = 0; i < word.length(); i++)
  {
       hash = (hash * seed) + word[i];
  }
return hash % TABLE_SIZE;
}
 
 
int
hash (string word)
{
int seed = 131;
unsigned long hash = 0;
for(int i = 0; i < word.length(); i++)
{
hash = (hash * seed) + word[i];
}
return hash % TABLE_SIZE;
}
 
 
 
#include <iostream>
#include <string>
#include <iomanip>
#include <functional>
#include <unordered_set>
 
int
main()
{
        std::string a = "ABCDE";
        std::size_t b = std::hash<std::string>{}(a);
        std::cout << b << std::endl; //b is 2786778698987242956. Hash Function could be b%TABLE_SIZE
}
 
I could implement MD5 hashing as well.
 
Next task items:
 
Tasks 1:
 
Insert 2^30 elements
Perform 2^20 lookups
Note the time taken for both operations.
 
Task 2:
 
Get the hashmap to behave and function like a database..
 
Change insert() method to accept the following:
typedef struct record {
                char key[1024];
                int value1;
                int value2;
} record_t;
 
record_t r;
 
For instance the function definition of “insert” would like something like this:
insert(char* key, &r, sizeof(record_t));
 
void
test(Myhash* h) {
                record_t y;
                strcpy (y.key, “some key name”);
                y.value1 = 1;
                y.value2 = 2;
 
                try
{
                h->insert(y.key, &y, sizeof(record_t);
}
catch (exception &e)
{
                cout << “Bad things happened: ” << e.what() << endl;
}
}
 
void
another_function()
{
                test(hash);
}
 
 
