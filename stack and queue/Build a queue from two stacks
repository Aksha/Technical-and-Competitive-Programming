I have one input stack, onto which I push the incoming elements, and one output stack, from which I peek/pop. 
I move elements from input stack to output stack when needed, i.e., when I need to peek/pop but the output stack
is empty. When that happens, I move all elements from input to output stack, thereby reversing the order so it's
the correct order for peek/pop.

The loop in peek does the moving from input to output stack. Each element only ever gets moved like that once,
though, and only after we already spent time pushing it, so the overall amortized cost for each operation is O(1).

class Queue {
    stack<int> input, output;
public:

    void push(int x) {
        input.push(x);
    }

    void pop() {
        int data = peek();
        output.pop();
    }

    int peek() {
        if (output.empty())
            while (input.size())
                output.push(input.top()), input.pop();
        return output.top();
    }

    bool empty() {
        return input.empty() && output.empty();
    }
};

You can implement queue using just one stack by either making push process costlier or pop costlier. 
Since we have two functions (top() and pop()) which require the top element of the stack, well make 
the push() function costlier - that is, for pushing a new element, we recursively pop the stack till 
it is empty and push it at the bottom of the stack, and take advantage of the recursive call to push back
in the popped elements once the recursive call hits the base condition and returns. This implementation 
makes pop() and peek() functions easier.
pop() is just going to pop off the top element in stack and peek() will return the top most element.

class Queue {
public:
    stack<int> s;
    
    // Push element x to the back of queue.
    void push(int x) {
        pushHelper(x);
    }
    void pushHelper(int x){
        if(s.size()==0){
            s.push(x);
            return;
        }
        int data;
        data = s.top();
        s.pop();
        pushHelper(x);
        s.push(data);
        return;
        
    }

    // Removes the element from in front of queue.
    void pop(void) {
        s.pop();
    }

    // Get the front element.
    int peek(void) {
        return s.top();
    }

    // Return whether the queue is empty.
    bool empty(void) {
        return (s.size()==0);
    }
};
