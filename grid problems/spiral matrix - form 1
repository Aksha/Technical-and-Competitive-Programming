Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        
        List<Integer> res = new ArrayList<Integer>();
        
        if (matrix.length == 0) {
            return res;
        }
        
        int rowBegin = 0;
        int rowEnd = matrix.length-1;
        int colBegin = 0;
        int colEnd = matrix[0].length - 1;
        
        while (rowBegin <= rowEnd && colBegin <= colEnd) {
            // Traverse Right
            for (int j = colBegin; j <= colEnd; j ++) {
                res.add(matrix[rowBegin][j]);
            }
            rowBegin++;
            
            // Traverse Down
            for (int j = rowBegin; j <= rowEnd; j ++) {
                res.add(matrix[j][colEnd]);
            }
            colEnd--;
            
            if (rowBegin <= rowEnd) {
                // Traverse Left
                for (int j = colEnd; j >= colBegin; j --) {
                    res.add(matrix[rowEnd][j]);
                }
            }
            rowEnd--;
            
            if (colBegin <= colEnd) {
                // Traver Up
                for (int j = rowEnd; j >= rowBegin; j --) {
                    res.add(matrix[j][colBegin]);
                }
            }
            colBegin ++;
        }
        
        return res;
    }
}

https://www.geeksforgeeks.org/print-a-given-matrix-in-spiral-form/
#include <iostream> 
using namespace std; 

#define R 4 
#define C 4 

// Function for printing matrix in spiral 
// form i, j: Start index of matrix, row 
// and column respectively m, n: End index 
// of matrix row and column respectively 
void print(int arr[R][C], int i, 
					int j, int m, int n) 
{ 
	// If i or j lies outside the matrix 
	if (i >= m or j >= n) 
		return; 

	// Print First Row 
	for (int p = i; p < n; p++) 
		cout << arr[i][p] << " "; 

	// Print Last Column 
	for (int p = i + 1; p < m; p++) 
		cout << arr[p][n - 1] << " "; 

	// Print Last Row, if Last and 
	// First Row are not same 
	if ((m - 1) != i) 
		for (int p = n - 2; p >= j; p--) 
			cout << arr[m - 1][p] << " "; 

	// Print First Column, if Last and 
	// First Column are not same 
	if ((n - 1) != j) 
		for (int p = m - 2; p > i; p--) 
			cout << arr[p][j] << " "; 

	print(arr, i + 1, j + 1, m - 1, n - 1); 
} 

// Driver Program 
int main() 
{ 

	int a[R][C] = { { 1, 2, 3, 4 }, 
					{ 5, 6, 7, 8 }, 
					{ 9, 10, 11, 12 }, 
					{ 13, 14, 15, 16 } }; 

	print(a, 0, 0, R, C); 
	return 0; 
} 
// This Code is contributed by Ankur Goel 

