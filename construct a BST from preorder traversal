     10
   /   \
  5     40
 /  \      \
1    7      50

is a BST for {10, 5, 1, 7, 40, 50}.

Time complexity: Linear solution O(n);
first, let me focus on achieving this intermediate pattern:
             10
           /    \
          /      \
  {5, 1, 7}       {40, 50}
  
At every iteration, I need to know the elements on the left and right subtree. 

// A recursive function to construct BST from pre[]. preIndex is used
// to keep track of index in pre[].
node* constructTreeUtil( int pre[], int preIndex, int key,
                                int min, int max, int size ){
    // Base case
    if( preIndex >= size )
        return NULL;
  
    node* root = NULL;
  
    // If current element of pre[] is in range, then
    // only it is part of current subtree
    if( key > min && key < max )
    {
        // Allocate memory for root of this subtree and increment preIndex
        root = new node( key );
        preIndex = preIndex + 1;
         
        if (preIndex < size)
        {
            // Contruct the subtree under root
            // All nodes which are in range {min .. key} will go in left
            // subtree, and first such node will be root of left subtree.
            root->left = constructTreeUtil( pre, preIndex, pre[preIndex],
                                        min, key, size );
  
            // All nodes which are in range {key..max} will go in right
            // subtree, and first such node will be root of right subtree.
            root->right = constructTreeUtil( pre, preIndex, pre[preIndex],
                                         key, max, size );
        }
    }
  
    return root;
}
 
// The main function to construct BST from given preorder traversal.
// This function mainly uses constructTreeUtil()
node* constructTree (int pre[], int size)
{
    int preIndex = 0;
    return constructTreeUtil ( pre, &preIndex, pre[0], INT_MIN, INT_MAX, size );
}
