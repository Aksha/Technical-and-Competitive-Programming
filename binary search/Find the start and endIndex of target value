#include <iostream>
using namespace std;


//  // [5, 7, 7, 8, 8, 8, 10] 8   
// 3 4 

// [8 8 8 8 8 8 8 8]
//


/*

1.using binary search
2. star = 0, end = arr.size()-1
3.while (start < end)
4. midvalue == target && leftvalue== target, recurse left to find the start position.auto
5. midvalue == target && rightvalue == target. start index = midvalue and recursive from mid+1 to end.
6. repeat this process until I find the endIndex.
*/


vector<int> binarySearchHelper(vector<int> arr, bool found, int start, int end, int target){
    int result = -1;
    while(start < end){ // 3 < 6
        int mid = start + end-start/2; 
        if(arr[mid] == target) { 
            result = mid; 
            if(!found){
                end = mid;   
            }
            else{
                start = mid+1; //start = 4
            }
        }
        else if(arr[mid] > target){
            end = mid;
        }
        else{
            start = mid+1; //start = 3
        }
            
    }
    return result;
}


vector<int> binarySearchDup(vector<int> arr, int target){
    vector<int> result;
    int start = 0;
    int end = arr.size()-1;
    int startIndex = -1;
    int endIndex = -1;
    int startIndex = binarySearchHelper(arr, false, start, end, target); // 3
    if(startIndex != -1)
        endIndex = binarySearch(arr,true,startIndex,end,target);
    result.push_back(startIndex);
    result.push_back(endIndex);
    return result;
}

// [5, 7, 7, 8, 8, 8, 10] 8
//start = 0, end = 6
//startIndex = -1, endINdex = -1

//Given an array of integers
int main() {
    cout<<"Hello";
    return 0;
}


