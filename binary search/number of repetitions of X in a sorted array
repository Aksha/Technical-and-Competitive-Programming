#Find the number of repetitions of X in a sorted array
 
int main_function(int Arr[], int N) {
	int count = 0;
	int searchFirstOccurence;
	int firstOccurence = worker_Function(Arr[], N, Arr.size(), 1);
  if(firstOccurence == false) {
    return count;
  }
  else {
    int lastOccurence = worker_Function(Arr[], N, Arr.size(), 0);
    count = (lastOccurence - firstOccurence) + 1;
  }
    return count;
  }
 
int worker_function(int Arr[], int N, int arraySize, bool searchFirstOccurence) {
	int start = 0;
	int end = arraySize - 1, result = 0;
	while(start<=end) {
		int mid = (start + end)/2;
		if(A[mid] == x) {
 	result = mid;
	if(searchFirstOccurence == 1) {
    end = mid;
  }
  else {
    start = mid+1;
  }
  }
      else if( x > A[mid]) {
    start = mid+1;
  }
  else {
    end = mid;
  }
  }
    return result;
} 
 
The lower bound and upper bound index position of the occurence of the target can be calculated and these values can be subtracted.  Refer the example below:
 
//this is a linear solution. THe previous solution is logn
Example

// lower_bound/upper_bound example
#include <iostream>     // std::cout
#include <algorithm>    // std::lower_bound, std::upper_bound, std::sort
#include <vector>       // std::vector

int main () {
  int myints[] = {10,20,30,30,20,10,10,20};
  std::vector<int> v(myints,myints+8);           // 10 20 30 30 20 10 10 20

  std::sort (v.begin(), v.end());                // 10 10 10 20 20 20 30 30

  std::vector<int>::iterator low,up;
  low=std::lower_bound (v.begin(), v.end(), 20); //          ^
  up= std::upper_bound (v.begin(), v.end(), 20); //                   ^

  std::cout << "lower_bound at position " << (low- v.begin()) << '\n';
  std::cout << "upper_bound at position " << (up - v.begin()) << '\n';

  return 0;
}
 
