#For a given matrix print it in spiral order
Input:
        1    2   3   4
        5    6   7   8
        9   10  11  12
        13  14  15  16
Output: 
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 

Solution: 
Time complexity: O(n) 

#include <iostream>
#include <vector>

using namespace std;

vector<int> spiralCopy(vector<vector<int>> &inputMatrix) {
  // your code goes here
  vector <int> result;
  int rows = inputMatrix.size()-1;
  int cols = inputMatrix[0].size()-1;
  int rowBegin = 0, colBegin = 0;
  while(rowBegin <= rows && colBegin <= cols){
    //left to right
    for(int i = colBegin; i <= cols; i++){
      result.insert(inputMatrix[rowBegin][i]]);
    }
    rowBegin++;
    //top to bottom
    for(int i = rowBegin; i <= rows; i++){
      result.insert(inputMatrix[i][cols]);
    }
    cols--;
    //bottom right to bottom left
    for(int i = cols; i >= colbegin; i--){
      result.insert(inputMatrix[rows][i]);
    }
    rows--;
    //bottom to top
    for(int i = rows; i >= rowbegin; i--){
      result.insert(inputMatrix[i][colBegin]);
    }
    colBegin++;
  }
  return result;
}


int main() {
  vector<vector<int>> inputMatrix = {[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]}; 
  vector<int> result = spiralMatrix(inputMatrix);
  for(int i = 0; i < result.size();i++){
    cout << result[i];
  }
  return 0;
}

