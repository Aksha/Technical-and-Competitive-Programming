Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

Problem number 42 on leetcode.

Solution:
This solution works in linear time and constant space.

class Solution {
public:
    int trap(vector<int>& height) {
        if(height.size() == 0)
            return 0;
        int total = 0;
        int i = 0;
        stack <int> s;
        while(i < height.size()){
            if(s.empty() || height[i] <= height[s.top()]){
                s.push(i);
                i++; // increment i only when the current index position has an element smaller than the element in the previous index position.
            }
            else{
                int bottom = s.top();
                s.pop();
                int currTotal = (s.empty()) ? 0 : ((min(height[i], height[s.top()]) - height[bottom]) * (i - s.top() - 1)); // the height of the water gap * distance between the indices of the two higher bars.
                cout << currTotal << endl;
                total += currTotal;
            }
        }
        return total;
    }
};
