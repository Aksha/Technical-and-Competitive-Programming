###############################################################################################################################
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

//First working solution: mxO(logn) where m is the number of rows and n is the number of columns
bool searchMatrix(vector<vector<int>> matrix, int target) {
  int row = 0;
  int col = matrix[0].size();
  while((row < matrix.size()) && (col >= 0)){
    if(matrix[row][col] == target)
      return true;
    else if(matrix[row][col] > target)
      col--;
    else
      row++;
  }
  return true;
}


//Efficient Solution: Time complexity: O(log(mn)) where m is the number of rows and n is the number of columns
//Give away: Whenever you have to perform a search in a sorted list/array/vector, think in terms of binary search and its variations.
bool searchMatrix(vector<vector<int>>& matrix, int target) {
    if(matrix.empty() || matrix[0].empty())
        return false;
    int m = matrix.size(), n = matrix[0].size();
    int start = 0, end = m*n - 1;
    while(start <= end){
        int mid = start + (end - start)/2; 
        int e = matrix[mid/n][mid%n];
        if(target < e)
            end = mid - 1;
        else if(target > e)
            start = mid + 1;
        else
            return true;
    }
    return false;
}
###############################################################################################################################
