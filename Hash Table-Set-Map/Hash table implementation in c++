Class HashEntry{
  private:
    int key;
    int value;
    HashEntry* next;
    
    public: 
    HashEntry(int key, int value){
      this.key = key;
      this.value = value;
      this.next = NULL;
    }   
    int getKey(){
      return key;
    }    
    int getValue(){
      return value;
    }
    void setKey(int key){
      this.key = key;
    }
    void setValue(int value){
      this.value = value;
    }
    HashEntry* getNext(HashEntry* next){
      return next;
    }
    void setNext(HashEntry* next){
      this.next = next;
    }
}

Class HashTable{
  private:
    HashEntry* table;
   public:
     HashTable(HashEntry* table){
        table = new HashTable(Table_Size);
        for(int i = 0; i < Table_Size; i++){
          table[i] = NULL;
        }
     }
     //Search a particular's key's coressponding value
     int get(int key){
      index = key % TABLE_SIZE; //map the key to an index in the table
      if(table[index] == NULL) 
        return -1;
      else{
        HashTable* entry = table[index];
        while(entry != NULL && entry->getKey != key)
          entry = entry->getNext;
        if(entry == NULL)
          return -1;
        return entry->getValue;
      }   
     }
     
     //Insert a key, value pair in the hashtable
     void put(int key, int value){
      index = key % Table_Size;
      HashEntry* entry = new HashEntry[key,value];
      if(table[index] == NULL){     
        table[index].insert(entry);
      }
      else{
        while(entry != NULL && entry.getKey() != key) 
          entry = entry->getNext;
        if (entry->getKey() != key)
              entry->setNext(new HashEntry(key, value));
        else
              entry[key] = value;
      }
     }
     
     void delete(int key, int value){
        index = key % Table_Size;
        HashEntry* entry = new HashEntry[key,value];
        if(table[index] != NULL){
          HashEntry* prevEntry = NULL;
          HashEntry* entry = table[hash];
          while (entry->getNext() != NULL && entry->getKey() != key) {
                prevEntry = entry;
                entry = entry->getNext();
          }
          if (entry->getKey() == key) {
            if (prevEntry == NULL) {
                 LinkedHashEntry *nextEntry = entry->getNext();
                 delete entry;
                 table[hash] = nextEntry;
            } 
            else {
                 LinkedHashEntry *next = entry->getNext();
                  delete entry;
                 prevEntry->setNext(next);
            }
          }
       }
     } 
     
     ~HashDelete(){
        for (int i = 0; i < TABLE_SIZE; i++)
                  if (table[i] != NULL) {
                        LinkedHashEntry *prevEntry = NULL;
                        LinkedHashEntry *entry = table[i];
                        while (entry != NULL) {
                             prevEntry = entry;
                             entry = entry->getNext();
                             delete prevEntry;
                        }
                  }
            delete[] table;    
      }
}
