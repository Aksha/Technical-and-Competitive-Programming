#include <iostream>
#include <unordered_map>

using namespace std;
/*
 * string S = "ppgsjeigs the";
//output: j.

 hset = ??
 (j,i,t,h)
 * */

char find_first_non_duplicate(string s) {
    unordered_map<char,int> hmap_count;
    unordered_map<char,int> hmap_indices;
    for(int i = 0; i < s.size(); i++) {
        if(hmap_count.find(s[i]) == hmap_count.end()) {
            hmap_count.insert(make_pair(s[i],1));
            hmap_indices.insert(make_pair(s[i],i));
        }
        else {
            hmap_count[s[i]]++;
        }
    }
    int index = INT_MAX;
    for(unordered_map<char,int>::iterator it = hmap_count.begin(); it != hmap_count.end(); it++) {
        if(it->second == 1) {
            if(hmap_indices[it->first] < index) {
                index = hmap_indices[it->first];
            }
        }
    }
    char result = ' ';
    if(index != INT_MAX)
     result = s[index];
    return result;
}

char find_first_non_duplicate2(string S) {
    
}

int main() {

    string S = "ppgsjeigs the";
    char result = find_first_non_duplicate(S);
    cout << "the first non duplicate number is : " << result << endl;
    char result1 = find_first_non_duplicate2(S);
    
    return 0;
}
