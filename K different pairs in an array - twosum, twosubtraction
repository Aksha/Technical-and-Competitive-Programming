Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. 
Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their 
absolute difference is k.

Input: [3, 1, 4, 1, 5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.

Input:[1, 2, 3, 4, 5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).

/*
    a - b = k
    b - a = k
    a1 = a2 + k
    a1 = a2 - k
 */
 //Input: [3, 1, 4, 1, 5], k = 2

class Solution {
public:
    /**
     * for every number in the array:
     *  - if there was a number previously k-diff with it, save the smaller to a set;
     *  - and save the value-index to a map;
     */
    int findPairs(vector<int>& nums, int k) {
        if (k < 0) {
            return 0;
        }
        unordered_set<int> starters;
        unordered_map<int, int> indices;
        for (int i = 0; i < nums.size(); i++) {
            if (indices.count(nums[i] - k)) {
                starters.insert(nums[i] - k);
            }
            if (indices.count(nums[i] + k)) {
                starters.insert(nums[i]);
            }

            indices[nums[i]] += 1;
        }
        
        return starters.size();
    }
};
 
 resultCount=3; //duplicates // wrong 
 Map :[3,1,4,]
 //Input: [3, 1, 4, 1, 5], k = 2
 HashMap: 
 3-1 -- 0
 1-2
 4-1
 5-1
 3-1=2 5-3 =2;
 if(map.containsKey(a[i]+k) && map.get(a[i] + k) != 0) result++
// [1,1,2,3,4,5] k=0
 //
 
public int findPairs(vector <int> nums, int k) {
        if(nums==null||nums.length==0||k<0) return 0;
        unordered_Map<int,int> map;
        int resultCount=0;
        for(int i:nums) {
            map[nums[i]]++;
        }
        
        for(auto es = map.begin(); es!= map.end(); ++es) {
            if(k==0) {
                if(es->second >=2)
                    resultCount++;
            }
            else {
                if(map.find(es->first + k) != map.end())
                    resultCount++;
            }
        }
        return resultCount++;        
    }
