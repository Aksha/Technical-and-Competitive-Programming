DFS:

public int depthSum(List<NestedInteger> nestedList) {
    return depthSum(nestedList, 1);
}

public int depthSum(List<NestedInteger> list, int depth) {
    int sum = 0;
    for (NestedInteger n : list) {
        if (n.isInteger()) {
            sum += n.getInteger() * depth;
        } else {
            sum += depthSum(n.getList(), depth + 1);
        }
    }
    return sum;
}

BFS:

class Solution {
public:
    int depthSum(vector<NestedInteger>& nestedList) {
        queue<NestedInteger> todo;
        for (auto i : nestedList) {
            todo.push(i);
        }
        int sum = 0, d = 1;
        while (!todo.empty()) {
            int n = todo.size();
            for (int i = 0; i < n; i++) {
                NestedInteger ni = todo.front();
                todo.pop();
                if (ni.isInteger()) {
                    sum += ni.getInteger() * d;
                } else {
                    for (auto j : ni.getList()) {
                        todo.push(j);
                    }
                }
            }
            d++;
        }
        return sum;
    }
};
