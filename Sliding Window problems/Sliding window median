Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

Examples: 
[2,3,4] , the median is 3

[2,3], the median is (2 + 3) / 2 = 2.5

Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Median
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
Therefore, return the median sliding window as [1,-1,-1,3,5,6].


------------------------------------------------------------------------------------------------------------------------
Solution: n is the number of elements. k is the size of the sliding window
// Time:  O(nlogk) - Since we go over all the elements in the array at least once. 
// Space: O(k) - at each iteration the multiset holds at most k elements
--------------------------------------------------------------------------------------------------------------------------

#include <vector>
#include <set>

class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: The median of the element inside the window at each moving
     */
    vector<int> medianSlidingWindow(vector<int> &nums, int k) {
        // minimum bst stores the larger half seen so far. (it has the minimum value at the front)
        multiset<int, less<int>> min_bst; (it has the min val at the top)
        // maximum bst stores the smaller half seen so far. (it has the max value at the front)
        multiset<int, greater<int>> max_bst;

        vector<int> ans;
        for (int i = 0; i < nums.size(); ++i) {
            //if the value of i has exceeded the size of the sliding window (which would mean the max and the min heap have k elements combined)
            if (i >= k) { 
                // Remove the element outside the window.
                //In a set/multiset, you can lookup only by values not index positions. Also, you can access the first and last element and only insert at the back. The set will rearrage by itself.
                if (max_bst.find(nums[i - k]) != max_bst.cend()) { //if the element to be removed is found in max_bst remove it.
                    max_bst.erase(max_bst.find(nums[i - k]));
                } else {
                    min_bst.erase(min_bst.find(nums[i - k])); //
                }
            }

            // Balance smaller half and larger half.
            if (max_bst.empty() || nums[i] > *max_bst.cbegin()) { //if max_bst is empty or if the highest element in it is lower than the current element
                min_bst.emplace(nums[i]);  //add the current element to the  min_bst.
                if (min_bst.size() > max_bst.size() + 1) { 
                    max_bst.emplace(*min_bst.cbegin());
                    min_bst.erase(min_bst.cbegin());
                }
            } 
            else {
                max_bst.emplace(nums[i]);
                if (max_bst.size() > min_bst.size()) {
                    min_bst.emplace(*max_bst.cbegin());
                    max_bst.erase(max_bst.cbegin());
                }
            }

            // If window is full, get the median from 2 BST.
            if (i >= k - 1) {
                ans.emplace_back(min_bst.size() == max_bst.size() ?
                                 *max_bst.cbegin() : *min_bst.cbegin());
            }
        }

        return ans;
    }
};
