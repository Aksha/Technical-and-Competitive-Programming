Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Time Complexity: 
Can you solve it in linear time? Yes, use deque.

/*

Given an array of integers and a number k, where 1 <= k <= length of the array, compute the maximum values of each subarray of length k.

For example, given array = [10, 5, 2, 9, 8, 7] and k = 3, we should get: [10, 7, 8, 8], since:

    10 = max(10, 5, 2)
    7 = max(5, 2, 7)
    8 = max(2, 7, 8)
    8 = max(7, 8, 7)


[0,4,5,6,1,3,5,7,9,10,20]

11
9

10 L5 R2
9 L5 R2

10,0 5,1 2,2

9,3 8,4 7,5


given arr = [10,5,2,9,8,7]

    10
   5   2
   
   
   extract max
   
   output_arr:[10,7,
   
   9
  5  2
  
  extract max 
  insert next number from array
  
  8
 2 5
 
 extract
  
  
  1. insert k elements in a max heap.  (priority_queue) [10,5,2]
  2. for (i = k to n-1) { // i = 7 O(nlogk) + O(logk)
      extractmax; 
      output_arr(^^) //output_arr = [10,9,8, 
      insert in heap(arr[k]);  // //[7,5,2]
      count++;
  }
  
  while(!pq.empty() && count <= n-k) { 
      int temp = pq.top();
      output_arr(temp); //[10,9,8,7]
      pq.pop();
      count++;
  }
  3. return output_arr;
           
   
   O(logk) + O(logk)
   
   
array = [10, 5, 2, 9, 8, 7] and k = 3



Brute force : sorting and priority queue*/

#include <iostream>
#include <priority_queue> 
#include <vector<

using namespace std;

vector<int> sliding_window_maximum(vector<int> arr, int k ) {
    priority_queue<int> pq;
    for(int i = 0; i < k; i++) {
        pq.push(arr[i]);
    }
    for(int i = k; i < 
}

int main() {
    vector<int> arr = {10, 5, 2, 9, 8, 7};
    int k = 3;
    vector<int> output_arr = sliding_window_maximum(arr,k);
    int n = output_arr.size();
    for(int i = 0; i < n; i++) {
        cout << output_arr[i] << ", ";
    }
    
}

/*
 array = [10, 5, 2, 9, 8, 7] and k = 3, we should get: [10, 7, 8, 8], since:

    10 = max(10, 5, 2)
    7 = max(5, 2, 7)
    8 = max(2, 7, 8)
    8 = max(7, 8, 7)
*/


class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        for (int i=0; i<nums.size(); i++) {
            if (!dq.empty() && dq.front() == i-k) dq.pop_front();
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            dq.push_back(i);
            if (i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};
