Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC".

class Solution {
public:
    string minWindow(string s, string t) {
        //1. if any of the strings are empty, then return 0.
        //2. Have slow and fast pointers, keep the slow pointer in a fixed position, move the fast pointer for every iteration. at  each point check if the fast pointer has a character that is in the map. if it is there in the map and main constraint (and as the number of times this character is seen is less than or equal to the number of times this character appears in the map),
        /*
        3. Calculate the length when you've seen the letters.
        4. If any letter count is more than its count in the map, don't increment the count.. When the count has reached the size of T, you can retur the size.. 
        5. if it has exceeded the size of T, see if you can alter the slow variable (i.e., the start position) to make the return the minimum length. 
        6. I can also check if I can reduce the length by changing the slow variable.
        */
        string result;
        if(S.empty() || T.empty()){
            return result;
        }
        unordered_map<char, int> map;
        unordered_map<char, int> window;
        for(int i = 0; i < T.length(); i++){
            map[T[i]]++;
        }
        int minLength = INT_MAX;
        int letterCounter = 0;
        for(int slow = 0, fast = 0; fast < S.length(); fast++){
            char c = S[fast];
            if(map.find(c) != map.end()){
                window[c]++;
                if(window[c] <= map[c]){
                    letterCounter++;
                }
            }
            if(letterCounter >= T.length()){
                while(map.find(S[slow]) == map.end() || window[S[slow]] > map[S[slow]]){
                    window[S[slow]]--;
                    slow++;
                }
                if(fast - slow + 1 < minLength){
                    minLength = fast - slow + 1;
                    result = S.substr(slow, minLength);
                }
            }
        }
        return result;
    }
};
        
        
    }
};
