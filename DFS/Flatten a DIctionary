Flatten a Dictionary

Given a dictionary, write a function to flatten it. Consider the following input/output scenario for better understanding:

Input:

{
  'Key1': '1',
  'Key2': {
    'a' : '2',
    'b' : '3',
    'c' : {
      'd' : '3',
      'e' : '1'
      }
    }
}
Output:
{
  'Key1': '1',
  'Key2.a': '2',
  'Key2.b' : '3',
  'Key2.c.d' : '3',
  'Key2.c.e' : '1'
}
--------------------------------------------------------------------------------------------------------------
Solution:
----------------------------------------------------------------------------------------------------------------
unordered_map<string,dictionary> flattenDictionary(int existingKey, unordered_map<string,dictionary> input, unordered_map <string, dictionary> result){
	for(auto key:input->first){
		auto value = input[key];
		if(result.find(value) == result.end()){ //if the key in the input is not found in result
			if(isNotInteger(key)) 
				result.push_back(existingKey + "." + key, value);
			else
				result.push_back(key, value);
		}
		else{ //if the key is found, make that the existing key and call flattenDictionary method recursively
			if(isNotInteger(key)) 
				flattenDictionary(existingKey + "." + key, input, result);
			else
				flattenDictionary(key, input, result);
		}
	}
	return result;
}

function flattenDictionary(initialKey, dictionary, flatDictionary):
  for (key : dictionary.keyset())
    value = dictionary.get(key)
    if (!isHashMapInstance(value)) //the value is a primitive
      if (initialKey == null || initialKey == "")
        flatDictionary.put(key, value)
      else
        flatDictionary.put(initialKey + "." + key, value)
    else
      if (initialKey == null || initialKey == "")
        flattenDictionary(key, value, flatDictionary)
      else
        flattenDictionary(initialKey + "." + key, value, flatDictionary)
