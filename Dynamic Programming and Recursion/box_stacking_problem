/*

1. Given a set of n types of rectangular 3-D boxes, where the i^th box has height h(i), width w(i) and depth d(i) (all real numbers), create a stack of boxes which is as tall as possible, but a box can only be stacked on top of another box if the dimensions of the 2-D base of the lower box are each strictly larger than those of the 2-D base of the higher box. Of course, a box can be rotated so that any side functions as its base. It is also allowable to use multiple instances of the same type of box.


    [[5, 4, 1],[3,2,5], [7,1,4]]
    
   [4,5,1],[1,4,5],[1,5,4]
   [2,3,5],[2,5,3],[3,5,2]
   [1,7,4],[1,4,7],[4,7,1]
   
   an infinite supply of these boxes.
   
   practical constraint : either of the two sides cannot be greater than the sides of the box below . the surface area should also be lesser.
   
          `                                [4,7,1]
    
          [4,5,1]    [3,5,1]   [3,5,2] [2,5,3]  [2,3,5] [1,7,4] [1,5,4], [1,4,5] [1,4,7]
          
        [3,5,1,]  
                     
                     
                     
                     [4,7,1]
                   
                   
                   [[5,4,1]] i = 0 -> 
                   
                   [4,5,1],[1,4,5],[1,5,4]
                   
 Combinations sorted by length and width (ascendingly) within each box dimensions:  [4,5,1],[1,4,5],[1,5,4],[2,3,5],[2,5,3],[3,5,2], [1,7,4],[1,4,7],[4,7,1] (sorted by length and width) <--1
   
 Final ordering:  [1,4,7],[1,4,5],[1,5,4],[1,7,4],[2,3,5],[2,5,3],[3,5,2],[4,5,1],[4,7,1] <--2
   

                   
                   
   1. generate all combinations of every box from the input arr;
   2.//in the combinations, arrange the boxes with length and width sorted within the box dimensions in ascending order. 1 

   3. sort it ascendingly based on x coordinates first and y coordinates later for equal values of x coordinates and store it in intermediate arr.
   4. for every box in the intermediate arr, figure out what are the possible boxes that can be stacked on top of it based on the following principle (x is lesser, y is lesser and surface area is lesser).
   5. calcualte the max height at this point and if it is greater than the "maximum" and store all the 3d values of boxes. 
   6. return the arr corresponding to maximum variable.
                   
                   
                   

*/

#include <iostream>
#include <vector>

using namespace std;


struct obj {
    int height;
    vectpr<vector<int>> boxes;
};
struct comp {
    bool operator()(vector<int> arr1,vector<int> arr2) {
        if(arr1.first == arr2.first) {
            return arr2.second > arr1.second;
        }
        return arr1.first > arr2.first; 
    }
};



obj box_stacking_helper(vector<int> curr_arr, vector<vector<int>> arr, int last_position ) { //last position place helps with determining the boxes to eliminate and not even check.    
    vector<vector<int>> curr_boxes;
    int curr_height = 0;
    for(int i = last_position; i >= 0; --i) {
        vector<int> curr_box = arr[i];
        if(arr[i]/curr_box satisfies the length, breadth and surface area criteria && not the same box) {
            curr_boxes.push_back(curr_box);
            curr_height += curr_box.third;
            
        }
    }
    return (curr_height, curr_boxes);
}

vector<vector<int>> box_stacking(vector<vector<int>> arr) {
    //generate 3 possible combinations for each box. temp_arr
    //in the combinations, arrange the boxes with length and width sorted within the box dimensions in ascending order. 1 
    sort(temp_arr.begin(); temp_arr.end(),comp()); //this sorting orders the boxes correspond to the final ordering. 2
    int size = arr.size();
    vector<vector<int>> result;
    for(int i = size-1; i >= 0; --i) {
        obj temp = box_stacking_helper(arr[i],arr, i);
        if(max_height < temp.height) {
            max_height = temp.height;
            result = temp.boxes;
        }
    }
    return result;
}

int main() {
    input_arr; //2d arrays 3 columns
    vector<vector<int>> result = box_stacking(input_arr);
    output result // 2d array with 3 columns
    
}
