 6/10 - rejected
Forgot to mention fraction values even though I thought about it.
One fraction and one whole number is fine.
Two fractions aren’t.

Considered 0 and negative values.

//Multiply without *
// handle negatives, all whole numbers
// use recursion

//Example : [2,19] = 38 ; [14, 0] = 0; [10, 13] = 130; [-6, 5] = -30; [-6, -5] = 30;

/*
1. check base conditions. if either of the numbers is 0, return 0.
2. calculate the min of the two numbers , pass the smaller number for addition, the larger one would be the number of times addn happens
3. return result
*/
#include <iostream>
#include <cmath>
#include <climits>
using namespace std;

void productOfTWoNumbers(minimum, maximum) 
{
  if (count == std::abs(maximum)) 
  {
    if ((minimum < 0 && maximum < 0) || (minimum > 0 && maximum > 0))
      result;
    else 
    {
      result = 0 - result;
      return result;
    }     
  }   
  result += minimum;
  count++;
  productOfTwoNumbers(minimum, maximum);
}

void productOfTwoNumbers_helper(minimum, maximum, &count, &result);
{
  productOfTwoNumbers(minimum, maximum);
}

int main() {
  int result = 0;
  int num1 = 2;
  int num2 = 19;
  int minimum = INT_MIN;
  int maximum = INT_MAX;
  if(num1 == 0 || num2 == 0)
    return 0;
  if (num1 <= num2) 
  {
    minimum = num1;
    maximum = num2;
  }
  else 
  {
    minimum = num2;
    maximum = num1;
  }
  int count = 0;
  result = productOfTwoNumbers_helper(minimum, maximum, &count, &result);
  cout << "the result is " << result << endl;
  return 0;
}

ACTUAL WORKING ANSWER:

//Multiply without *
// handle negatives, all whole numbers
// use recursion

//Example : [2,19] = 38 ; [14, 0] = 0; [10, 13] = 130; [-6, 5] = -30; [-6, -5] = 30;

/*
1. check base conditions. if either of the numbers is 0, return 0.
2. calculate the min of the two numbers , pass the smaller number for addition, the larger one would be the number of times addn happens
3. return result
*/
#include <iostream>
#include <cmath>
#include <climits>
using namespace std;

int productOfTwoNumbers(int minimum, int maximum, int count, int result) 
{
  if (count == abs(maximum)) 
  {
    if ((minimum < 0 && maximum < 0) || (minimum > 0 && maximum > 0))
    {
      return result;
    }
    else 
    {
      result = 0 - result;
      return result;
    }     
  }   
  result += minimum;
  count++;
  productOfTwoNumbers(minimum, maximum, count, result);
}

int main() {
  int result = 0;
  int num1 = -6;
  int num2 = 5;
  int minimum = INT_MIN; // thought of minimum and maximum if we were to account one fractional value that would be set as minimum and the whole number would be maximum. THis would help get accurate results.
  int maximum = INT_MAX;
  if(num1 == 0 || num2 == 0)
    return 0;
  if (num1 <= num2) 
  {
    minimum = num1;
    maximum = num2;
  }
  else 
  {
    minimum = num2;
    maximum = num1;
  }
  int count = 0;
  result = productOfTwoNumbers(minimum, maximum, count, result);
  cout << "the result is " << result << endl;
  return 0;
}

Better working solution that takes in only 2 numbers as input parameters:

//Multiply without *
// handle negatives, all whole numbers
// use recursion

//Example : [2,19] = 38 ; [14, 0] = 0; [10, 13] = 130; [-6, 5] = -30; [-6, -5] = 30;

/*
1. check base conditions. if either of the numbers is 0, return 0.
2. calculate the min of the two numbers , pass the smaller number for addition, the larger one would be the number of times addn happens
3. return result
*/

#include <iostream>
#include <cmath>
#include <climits>
using namespace std;

int cnt = 0;
int result = 0;

int productOfTwoNumbers(int minimum, int maximum)
{
   if (cnt == abs(maximum))
   {
       if ((minimum < 0 && maximum < 0) || (minimum > 0 && maximum > 0))
       {
           result = 0 - result;
           return result;
       }
       else
       {
           return result;
       }
   }
   result += minimum;
   cnt++;
   return productOfTwoNumbers(minimum, maximum);
}

int main() {
   int num1 = -8;
   int num2 = 0;
   result = productOfTwoNumbers(num1, num2);
   cout << "the result is " << result << endl;
   return 0;
}

Another way without the use of global variables: 
#include <iostream>
using namespace std;

int productOfTwoNumbers_helper(int minimum, int maximum, int result, int cnt){
   if (cnt == abs(maximum))
   {
       if ((minimum < 0 && maximum < 0) || (minimum > 0 && maximum > 0))
       {
           result = 0 - result;
       }
       return result;
   }
   result += minimum;
   cnt++;
   return productOfTwoNumbers_helper(minimum, maximum, result, cnt);

}
void productOfTwoNumbers(int minimum, int maximum)
{
   int cnt = 0;
   int result = 0;
   result = productOfTwoNumbers_helper(minimum, maximum, result, cnt);
   cout << result << endl;
   return;
}

int main() {
   int num1 = -8;
   int num2 = 0;
   productOfTwoNumbers(num1, num2);
   return 0;
}



More info or discussion at the interview:

How can an integer be implemented? Binary, Octal, Hexadecimal and denary

#include <iostream.h>


int choice();
long int toBinary(long int a);
long int toOctal(long int a);
long int toHex(long int a);


long int main ()
{
int convert=choice();


switch (convert)
{
 case (0):
 toBinary ();
 break;


 case (1):
 toOctal ();
 break;


 case (2):
 toHex ();
 break;
}
 return 0;
}


long int choice ()
{
int convert;
cout<<"Enter Your Choice of Conversion";
cout<<"\nConvert the decimal into the following:";
cout<<"\n0-[B]inary";
cout<<"\n1-[O]ctal";
cout<<"\n2-[H]exadecial";
cin>>convert;
return convert;
}


long int toBinary (long int a)
{
long int num;
long int answer=0;


cout<<"Please enter a decimal";
cin>>num;


while (num>0)
{
 answer=a%2;
 a=a/2;
 cout <<answer<<" ";
 }
return answer;
}


long int toOctal(long int a)
{
		long int num;
		long int answer=0;


		 cout<<"Please enter a decimal: ";
		 cin>>num;


			 while(num>0)
			 {
			 answer=a%8;
			 a=a/8;
			 cout<<answer<< " ";
			 }


}
long int toHex (long int a)
{
	long int num;
	int answer[]=0;
	int ctr;


	 cout<<"Please enter a decimal";
	 cin>>num;




	  num=a%16;
	  ctr++;
	  answer[ctr]=num;




	  for (int ctr=a;ctr>0;ctr--)
	  {
	  cout<<answer[ctr];
	  }
	  return num;
}


}

Here is a sample table for reference: 

Denary
(base 10)
Hexadecimal
(base 16)
Octal
(base 8)
Binary
(base 2)
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
0
1
2
3
4
5
6
7
8
9
A
B
C
D
E
F
000
001
002
003
004
005
006
007
010
011
012
013
014
015
016
017
00000000
00000001
00000010
00000011
00000100
00000101
00000110
00000111
00001000
00001001
00001010
00001011
00001100
00001101
00001110
00001111
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
10
11
12
13
14
15
16
17
18
19
1A
1B
1C
1D
1E
1F
020
021
022
023
024
025
026
027
030
031
032
033
034
035
036
037
00010000
00010001
00010010
00010011
00010100
00010101
00010110
00010111
00011000
00011001
00011010
00011011
00011100
00011101
00011110
00011111

Feedback: 

He said he wanted to pass in only 2 arguments to productOfTwoNumberes method. How stupid have I been!!!!
I forgot the use of Global Variables. Really ?!
Didn’t ask why I shouldn’t use an iterative method and use only recursion
Thought about fractional values, corner cases  (So obvious) but didn’t mention.
Didn’t know how to make a number negative. 0 - the number obviously. I am ashamed. No hope about him calling back.
Last but not the least, come across as casual. Don’t be paranoid while trying to understand work culture. 
Mostly rejected, the only reason I’d get a chance to go onsite is if they don’t get competent / good enough candidates.
I screwed up “call by reference” like crazy. Wonder why.
Pointers and address completely misdefined.
Couldn’t find the negative of a number without appending a ‘-’ sign. Just subtract by 0 for God’s sake. It’s ok. It’s acceptable first interview. 

Need more practice less nervousness.

Don’t talk unnecessarily. Listen to the interviewer and his question.
Voice training is required. My voice feels like I don’t care about the interview.
If I don’t know something, I can stay quiet instead of thinking out aloud and blabbering something like mnemonics. I can take 5 secs think through in my head and then give an answer or ask for time to gather my thoughts.
Biggest blunder here - ignored his advice. He said adding 14 0 times would give a 0. I opposed that and said if I add 14 0 times, I would get 14. But my first condition checks if my count variable has reached num2 and it would have returned 0. Worsto worst mistake.
What the hell is wrong with me? Don’t I know simple addition? Add 13 a hundred times, I will get a 1300. I add it 10 times, I’ll be at 130.. Imagine 130 added 10 times.. It will give me 1300. Worsto worst.. Write simple examples and try to solve for it. Then extend it to more complex examples. 13 and 5 would have been a better choice. 7 and 2 are easier.. Now extend it. I messed up badly.
If I don’t know at all, ask “Can we work through it”
Why did I have to screw up call by value and call by reference? 

Here is the difference between call by value and reference: 
Example 2: Function Call by Reference – Swapping numbers
Here we are swapping the numbers using call by reference. As you can see the values of the variables have been changed after calling the swapnum() function because the swap happened on the addresses of the variables num1 and num2.
#include 
void swapnum ( int *var1, int *var2 )
{
   int tempnum ;
   tempnum = *var1 ;
   *var1 = *var2 ;
   *var2 = tempnum ;
}
int main( )
{
   int num1 = 35, num2 = 45 ;
   printf("Before swapping:");
   printf("\nnum1 value is %d", num1);
   printf("\nnum2 value is %d", num2);

   /*calling swap function*/
   swapnum( &num1, &num2 );

   printf("\nAfter swapping:");
   printf("\nnum1 value is %d", num1);
   printf("\nnum2 value is %d", num2);
   return 0;
}

Some notes on pointers:

#include <iostream>

using namespace std;

int main() {
   int *a = new int;
   *a = 5;
   int b = 50;
   cout << "value of a is : " << a << "value of *a is " << *a << endl;
   cout << "b is : " << b << " what is &b : " << &b << endl;
 delete a;
   return 0;
}


Output: 
value of a is : 0x7f83864006a0value of *a is 5
b is : 50 what is &b : 0x7ffee9da2afc


Pointers more:
#include <iostream>

using namespace std;

int main() {
   int b = 50;
   cout << "b is : " << b << " what is &b : " << &b << endl;
   int *a = &b;
   cout << " a is now : " << a << endl;
   cout << " on deferencing a is : " << &a << endl;
   cout << " the value stored at a is *a: " << *a << endl;
   return 0;
}

Output:
/Users/Aks/CLionProjects/pointersTest/cmake-build-debug/pointersTest
b is : 50 what is &b : 0x7ffee429bb08
 a is now : 0x7ffee429bb08
 on deferencing a is : 0x7ffee429bb00
 the value stored at a is *a: 50

