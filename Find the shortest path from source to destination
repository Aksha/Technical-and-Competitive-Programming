###########################################################################################################################
#Given a set of nodes, find the shortest path from source to destination.

Breath first search gives the shortest path from the source to destination with a time complexity of O(|V| + |E|) where V is 
the vertices and E is the edges in the graph or tree like structure. Graph algorithm are represented by adjacency list or matrix.
I am taking as input an adjacency list to represent graph G :(V,E)for compact representation.
----------------------------------------------------------------------------------------------------------------------------------------
Reasons for using Breath First Search to calculate the shortest path:
Given a graph G = (V, E) and a distinguished source vertex s,
breadth-first search systematically explores the edges of G to "discover" every vertex
that is reachable from s. It computes the distance (fewest number of edges) from s to all 
such reachable vertices. It also produces a "breadth-first tree" with root s that 
contains all such reachable vertices. For any vertex v reachable from s, the path in 
the breadth-first tree from s to v corresponds to a "shortest path" from s to v in G,
that is, a path containing the fewest number of edges. The algorithm works on both directed and undirected graphs.
----------------------------------------------------------------------------------------------------------------------------------------
void ShortestPath(vector<vector<int>> AL, int source, int destination){
  int visited[AL.size()] = {0};
  queue<int> BFS;
  vector<int>result;
  BFS.push_back(AL[0]);
  while(!BFS) {
   int top = BFS.front();
   BFS.pop();
   for(int i = 0; i < AL[front].size;i++){
    if(AL[front][i] == destination && visited[AL[front][i]] == 0) {
      while( AL[front][i] != source){
        cout << AL[front][i] << endl;
        AL[front][i] = parent[AL[front][i]];
      }
      cout << AL[front][i];
    }
    if(visited[AL[front][i]] == 0){
      visited[AL[front][i]] = 1;
      parent[AL[front][i]] = front; 
      BFS.push_back(AL[top][i]);
     }
   }
   return result;
  }
###########################################################################################################################
