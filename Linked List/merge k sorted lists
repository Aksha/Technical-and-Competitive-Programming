Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

------------------------------------------------------------------------------------------------------------------
Solution O(kn) k is the number of lists, n is the average size of list.
------------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()){
             return nullptr;
        }
        while(lists.size() > 1){
            lists.push_back(mergeTwoLists(lists[0], lists[1]));
            lists.erase(lists.begin());
            lists.erase(lists.begin());
        }
        return lists.front();
    }
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
       
        ListNode* result = new ListNode(INT_MIN);
        ListNode* current = result;
        while(l1 && l2){
            if(l1->val <= l2->val){
                current->next = l1;
                l1 = l1->next;
            }
            else{
                current->next = l2;
                l2 = l2->next;
            }
            current = current->next;
        }
        current -> next = l1 ? l1 : l2;
        return result->next;
    }
};
