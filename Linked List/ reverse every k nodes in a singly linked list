Node* reverseKnodes(Node* node, int k) {
  if(node == NULL) {
    return;
  }

  Node* first = node;
  Node* second = NULL;
  Node* last;
  Node* headtracker = first;
  int count = 0;

  while (first->next != NULL && count < k) {
    last = second;
    second = first;
    first = first -> next;
    second -> next = last;
    count ++; 
  }	

  if(first != NULL)
    headtracker->next = reverseKnodes(first, k);

  return second;
}

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

--------------------------------------------------------------------------------------------------------------
right solution
--------------------------------------------------------------------------------------------------------------


This is the right solution as the following is the output I need: (I need to reverse only if I find k elements. Otherwise I Shouldn't do anything.
class Solution 
{
public:
    
    ListNode* reverse(ListNode* first, ListNode* last)
    {
        ListNode* prev = last;
        
        while ( first != last )
        {
            auto tmp = first->next;
            first->next = prev;
            prev = first;
            first = tmp;
        }
        
        return prev;
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) 
    {
        auto node=head;
        for (int i=0; i < k; ++i)
        {
            if ( ! node  )
                return head; // nothing to do list too sort
            node = node->next;
        }

        auto new_head = reverse( head, node);
        head->next = reverseKGroup( node, k);
        return new_head;
    }
};
