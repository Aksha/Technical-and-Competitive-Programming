/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 && !l2) {
            return l1;
        }
        if(l2 && !l1) {
            return l2;
        }
        if(!l1 && !l2) {
            return NULL;
        }
        ListNode* head = new ListNode();
        ListNode* current = head;
        while(l1 && l2) {
            ListNode* temp = new ListNode();
            current->next = temp;
            current = current->next;
            if(l1->val <= l2->val) {
                current->val = l1->val;
                l1 = l1->next;  
            }
            else if(l2->val < l1->val) {
                current->val = l2->val;
                l2 = l2->next;
            }
        }
        while(l1) {
            ListNode* temp = new ListNode();
            current->next = temp;
            current = current->next;
            current->val = l1->val;
            l1 = l1->next;
        }
        while(l2) {
            ListNode* temp = new ListNode();
            current->next = temp;
            current = current->next;
            current->val = l2->val;
            l2 = l2->next;
        }
        return head->next;
    }
};
