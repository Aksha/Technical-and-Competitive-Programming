#include <iostream>

using namespace std;

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(NULL) {}
  ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(n == 0 || !head) {
            return head;
        }
        int listSize = 0;
        ListNode* current = head;
        while(current) {
            current = current -> next;
            listSize = listSize + 1;
        }
        if(listSize < n) {
            return head;
        }
        int removePosition = listSize - n;
        current = head;
        ListNode* prev = new ListNode(0);;
        prev->next = head;
        head = prev;
        int count = 0;
        while(count < removePosition) {
            prev = current;
            current = current -> next;
            count = count + 1;
        }
        ListNode* hold = current;
        if(current) {
            prev->next = current->next;
        }
        else {
            prev->next = NULL;
        }
        delete(hold);
        return head->next;
    }
};

int main() {
    Solution s;
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(4);
    head->next->next->next->next = new ListNode(5);
    ListNode* newHead = s.removeNthFromEnd(head,2);
    while(newHead->next) {
        cout << "New head after nth element removed" << newHead->val << ", ";
        newHead = newHead->next;
    }
    cout << newHead->val;
    return 0;
}
