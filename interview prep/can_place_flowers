You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: true

Solution 1:
Mutate the array:

class Solution {
    
    //n = 2 new flowers 1 0 0 0 1
    // 1 0 1 0 1
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int sz = flowerbed.size();
        for(int i = 0; i < sz; i++) {
          if(flowerbed[i] == 0 && (i == 0 || flowerbed[i-1] == 0) && (i+1 == sz || flowerbed[i+1] == 0)) {
                flowerbed[i] = 1;
                n -= 1;
            }
        }
        return n<=0;
    }
};

Solution 2:
Without mutating the array (add 1 element to the front and 1 element to the back).
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        flowerbed.insert(flowerbed.begin(),0);
        flowerbed.push_back(0);
        for(int i = 1; i < flowerbed.size()-1; ++i)
        {
            if(flowerbed[i-1] + flowerbed[i] + flowerbed[i+1] == 0)
            {
                --n;
                ++i;
            }
                
        }
        return n <=0;
    }
};
