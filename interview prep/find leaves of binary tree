Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

 

Example:

Input: [1,2,3,4,5]
  
          1
         / \
        2   3
       / \     
      4   5    

Output: [[4,5,3],[2],[1]]

Solution:

Intuition

The order in which the elements (nodes) will be collected in the final answer depends on the "height" of these nodes. The height of a node is the number of edges from the node to the deepest leaf. The nodes that are located in the ith height will be appear in the ith collection in the final answer. For any given node in the binary tree, the height is obtained by adding 1 to the maximum height of any children. Formally, for a given node of the binary tree \text{root}root, it's height can be represented as

{height(root)} = {1} + {max(height(root.left), height(root.right))}height(root)=1+max(height(root.left), height(root.right))

Where root.left and root.right are left and right children of the root respectively

Algorithm

In our first approach, we'll simply traverse the tree recursively in a depth first search manner using the function int getHeight(node), which will return the height of the given node in the binary tree. Since height of any node depends on the height of it's children node, hence we traverse the tree in a post-order manner (i.e. height of the childrens are calculated first before calculating the height of the given node). Additionally, whenever we encounter a null node, we simply return -1 as it's height.

Next, we'll store the pair (height, val) for all the nodes which will be sorted later to obtain the final answer. The sorting will be done in increasing order considering the height first and then the val. Hence we'll obtain all the pairs in the increasing order of their height in the given binary tree.



#include <iostream>
#include <vector>

using namespace std;

 struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };

int getHeight(TreeNode *root, vector<pair<int,int>> &pairs) {

    if (!root) return -1;

    int leftHeight = getHeight(root->left, pairs);
    int rightHeight = getHeight(root->right, pairs);

    // based on the height of the left and right children, obtain the height of the current (parent) node
    int currHeight = max(leftHeight, rightHeight) + 1;

    // collect the pair -> (height, val)
    pairs.push_back({currHeight, root->val});

    // return the height of the current node
    return currHeight;
}

vector<vector<int>> findLeaves(TreeNode* root) {
    vector<vector<int>> result;
    if(!root)
        return result;
    vector<pair<int,int>> pairs; //height and value;
    int height = getHeight(root, pairs);
    result.resize(height+1);
    sort(pairs.begin(), pairs.end());
    for(int i = 0; i < pairs.size(); i++) {
        result[pairs[i].first].push_back(pairs[i].second);
    }
    return result;
}

int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    vector<vector<int>> result = findLeaves(root);
    cout  << " The final output is : " << endl;
    for(int i = 0; i < result.size(); i++) {
        for(int j = 0; j < result[i].size(); j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}
