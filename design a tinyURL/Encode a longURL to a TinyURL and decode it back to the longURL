Problem statement: Convert longURL to short URL (encode and decode) and vice versa.
 
decode(TinyURL) - > long URL
encode(long URL) -> Tiny URL


encode("http://www.google.com")
output: http://ti.me

1.what can the tinyURL contain ? a-z, A-Z and 0-9 = 62
2. What will be the maximum size of the tinyURL? 62^7 = 3.5 trillion combinations


#include <iostream>
#include <unordered_map>
#include <string>
#include <cmath>

using namespace std;

string dict = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; // if you prefer using base64 encoding, throw '+' and '/' into the mix
    int id = 899;
    unordered_map<string,string> m;  //key is longURL, value is shortURL
    unordered_map<int, string> idm;  //key is id in DB, value is longURL
    // Encodes a URL to a shortened URL.
    string encode(string longUrl) {
        if(m.find(longUrl) != m.end())return m[longUrl];
        string res = "";
        id++; //1
        int count = id;
        while(count > 0) {
            res = dict[count%62] + res; //res = 1
            count /= 62; //count = 0
        }
        while(res.size() < 6) {
            res = "0" + res; //000001
        }
        m[longUrl] = res; //m["www.google.com"] = 000001
        idm[id] = longUrl; //idm[1] = www.google.com
        return res;
    }

    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl) {
        long long int id = 0;
        for(int i = 0; i < shortUrl.size(); i++) {
            id = (int)(dict.find(shortUrl[i])) + 62 * id;
            cout << "id : " << id << endl;

        }
        if(idm.find(id) != idm.end())return idm[id];
        return "";
    }

int main() {
        string shortURL = encode("www.google.com");
        string longURL = decode(shortURL);
        std::cout << "shortURL : " << shortURL << std::endl;
        cout << "LongURL : " << longURL << endl;

        return 0;
}
