
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

Answer:
class Solution {
public:
  // Print all members of ar[] that have given 
    void findNumbers(vector<int>& ar, int sum, 
                     vector<vector<int> >& res, 
                     vector<int>& r, int i) 
    { 
        // If  current sum becomes negative 
        if (sum < 0) 
            return; 

        // if we get exact answer 
        if (sum == 0) 
        { 
            res.push_back(r); 
            return; 
        } 

        // Recur for all remaining elements that 
        // have value smaller than sum. 
        while (i < ar.size() && sum - ar[i] >= 0) 
        { 

            // Till every element in the array starting 
            // from i which can contribute to the sum 
            r.push_back(ar[i]); // add them to list 

            // recur for next numbers 
            findNumbers(ar, sum - ar[i], res, r, i); 
            i++; 

            // remove number from list (backtracking) 
            r.pop_back(); 
        } 
    } 

    // Returns all combinations of ar[] that have given 
    // sum. 
    vector<vector<int> > combinationSum(vector<int>& ar, 
                                                int sum) 
    { 
        // sort input array 
        sort(ar.begin(), ar.end()); 

        // remove duplicates 
        ar.erase(unique(ar.begin(), ar.end()), ar.end()); 

        vector<int> r; 
        vector<vector<int> > res; 
        findNumbers(ar, sum, res, r, 0); 

        return res; 
    } 
};
