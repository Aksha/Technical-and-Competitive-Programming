Combinational sum iii:

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
Note:
All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:
Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

class Solution {
public:
    void findNumbers(vector<int>& ar, int sum, 
                     vector<vector<int> >& res, 
                     vector<int>& r, int i) 
    { 
        // If  current sum becomes negative 
        if (sum < 0) 
            return; 

        // if we get exact answer 
        if (sum == 0) 
        { 
            res.push_back(r); 
            return; 
        } 

        // Recur for all remaining elements that 
        // have value smaller than sum. 
        while (i < ar.size() && sum - ar[i] >= 0) 
        { 

            // Till every element in the array starting 
            // from i which can contribute to the sum 
            r.push_back(ar[i]); // add them to list 

            // recur for next numbers 
            findNumbers(ar, sum - ar[i], res, r, i+1); 
            i++; 

            // remove number from list (backtracking) 
            r.pop_back(); 
        } 
    } 
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector <int> candidates;
        for (int i = 1; i <= 9; i++) {
            candidates.push_back(i);
        }

        // remove duplicates 
        //candidates.erase(unique(candidates.begin(), candidates.end()), candidates.end()); 

        vector<int> r; 
        vector<vector<int> > res; 
        findNumbers(candidates, n, res, r, 0); 
        
        vector <vector <int>> result;
        for(int i = 0; i < res.size(); i++) {
            if (res[i].size() == k)
                result.push_back(res[i]);
        }
        return result; 
    }
};

