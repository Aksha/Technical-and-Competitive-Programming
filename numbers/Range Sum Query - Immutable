Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The idea is fairly straightforward: create an array accu that stores the accumulated sum for nums 
such that accu[i] = nums[0] + ... + nums[i - 1] in the initializer of NumArray. Then just return 
accu[j + 1] - accu[i] in sumRange. You may try the example in the problem statement to convince yourself of this idea.



Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function.

class NumArray {
public:
    NumArray(vector<int> nums) { 
       rangeVector.push_back(0);
       for(int num: nums)
           rangeVector.push_back(rangeVector.back() + num);
    }
    
    int sumRange(int i, int j) {
        return rangeVector(j+1) - rangeVector(i);
    }
    private: 
    vector <int> rangeVector;
};
