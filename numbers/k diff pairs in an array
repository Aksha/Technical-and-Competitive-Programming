Pairs with Specific Difference

Given an array arr of distinct integers and a nonnegative integer k, write a function findPairsWithGivenDifference that returns an array of all pairs [x,y] in arr, such that x - y = k. If no such pairs exist, return an empty array.

In your solution, try to reduce the memory usage while maintaining time efficiency. Prove the correctness of your solution and analyze its time and space complexities.

Note: the order of the pairs in the output array doesn’t matter.

Examples:

input:  arr = [0, -1, -2, 2, 1], k = 1
output: [[0, -1], [-1, -2], [2, 1], [1, 0]]

input:  arr = [1, 7, 5, 3, 32, 17, 12], k = 17
output: []


---------------------------------------------------------------------------------------------------------------------------------
Solution:
----------------------------------------------------------------------------------------------------------------------------------

Linear solution with linear time and linear space:

int findPairs(vector<int>& nums, int k) { 
	if(k < 0) return 0; 
	int result = 0;
	 unordered_map<int,int> hashmap;
	for(int i = 0; i < nums.size(); ++i) 
		hashmap[nums[i]]++;
	if(k != 0) { 
		for(unordered_map<int>::iterator it = hashmap.begin(); it != hashmap.end(); it++) 
			if(hashmap.find(it->first+k) != hashmap.end())
				result++; 
		 } 
	else {
		for(unordered_map<int>::iterator it = hashmap.begin(); it != hashmap.end(); it++)
			 if(it->second > 1)
				 result++;
	}
	return result; 
 }
 
 ORRRRRR
 
 This solution takes O(nlogn) time and O(n) space
 
 
#include <iostream>
#include <vector>

using namespace std;

vector<vector<int>> findPairsWithGivenDifference( const vector<int>& arr, int k) {
  vector<vector<int>> result;
  sort(arr.begin(), arr.end());
  int start = 0, second = 1;
  while(first <arr.size() && second < arr.size()){
      if(arr[second] - arr[start] == k){ 
        result.push_back(make_pair(arr[start],arr[second]));
        start++;
        second++;
      }
      else if(arr[second] - arr[start] > k)
        start++;
      else if(arr[second] - arr[start] < k) 
        second++;
    }
  }
  return result;
}

int main() {
  return 0;
}

//[-2,-1,0,1,5]  k = 2

//[-1,-2]

//[1,3,5,7,12,17,32] k = 17;

In this solution, we skip checking many pairs, yet we claim that all the correct pairs are found. Why are all the pairs found? If we incremented the first pointer, it means that arr[last] - arr[first] > k, thus all remaining pairs with the number in arr[first] have a larger difference than k (thus we only eliminated wrong pairs). If we incremented the last pointer, then since the array is distinct, all other unchecked pairs with arr[last] have arr[last] - arr[first] < k. Since every step in the while clause increments one of the counters, there is no double counting.

Time Complexity: the most expensive step in the algorithm is sorting the array, which takes O(N⋅log(N)) time. 
The while loop is O(N) since every iteration increments one of the counters by one (thus the maximal number of
iterations is 2N). So the total time complexity is O(N⋅log(N)) + O(N) = O(N·log(N)).

Space Complexity: since the size of the output itself is O(N), the space complexity is O(N) as well. However, 
excluding the output, notice that we used only O(1) space since the sorting is in place and we only initialize 
two pointers.

