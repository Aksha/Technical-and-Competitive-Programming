#include <iostream>
#include <vector>
using namespace std;

typedef pair<int, int> p;

/*
S***** wants to help guests plan their stay
by finding check-in and check-out dates that accommodate a desired length of stay.

S***** determines availability based on existing bookings,
in this case, weâ€™re serializing them as colon-separated pairs of integers.
The first integer is a check-in date, and the second is a check-out date.
Each integer represents an offset since Jan 1, 2019.
E.g. '0:1' represents a booking where the check-in date is Jan 1st 2019,
and the check-out date is Jan 2nd 2019.

Directions
Implement a method, booking_start_date(string bookings, int stay_length, int current_date)
that will return the first day that can accommodate a booking of length stay_length.

Examples:
Input: bookings: '0:2 3:5 7:14', stay_length: 1, current_date: 4 ;[2:3, 5:7]
Output: 5
Input: bookings: '0:3 3:6 7:14', stay_length: 2, current_date: 4
Output: 14
Input: bookings: '0:2 5:6 7:14', stay_length: 1, current_date: 3
Output: 3

Rules:
Input is well-formed
Bookings will not overlap
Bookings are sorted in order of check-in date
Only dates later than or equal to current date should be returned
*/

vector<p> available_intervals(vector<p> bookings)
{
    //{{0,2}, {3,5}, {7,14}}
    vector<p> available_dates;
    for (int i = 0; i < bookings.size() - 1; i++)
    {
        if (bookings[i + 1].first - bookings[i].second > 0)
        {
            available_dates.push_back(make_pair(bookings[i].second, bookings[i + 1].first));	//{2,3}, {5,7}
        }
    }
    return available_dates;
}

int compute_earliest_date(vector<p> bookings, vector<p> available_dates, int stay_length, int current_date)
{
    int result = bookings[bookings.size() - 1].second;
    for (int i = 0; i < available_dates.size(); i++)
    {
        //{2,5}, {6,7}
        if(available_dates[i].second >= current_date && available_dates[i].first >= current_date) {
            if(available_dates[i].second - available_dates[i].first >= stay_length) {
                result = available_dates[i].first;
                return result;
            }
        }
        else if (available_dates[i].second >= current_date && available_dates[i].first < current_date) {
            int compare = available_dates[i].first;
            while(available_dates[i].second - compare >= stay_length) {
                if(compare < current_date) {
                    compare++;
                }
                else {
                    return compare;
                }
            }
        }
        else {
            continue;
        }
    }
    return result;
}

int main()
{
    p intervals;
    vector<p> bookings = {
            { 0, 2 },
            { 5, 6 },
            { 7, 14 }
    };	//0:2 5:6 7:14
    int stay_length = 1;
    int current_date = 3;
    vector<p> available_dates = available_intervals(bookings);	//{2,3}, {5,7}
    int start_date = compute_earliest_date(bookings, available_dates, stay_length, current_date);
    cout << "The earliest available date to book your stay is : " << start_date << endl;
    return 0;
}
