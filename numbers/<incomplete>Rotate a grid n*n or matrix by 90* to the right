It is a problem from the arrays chapter in cracking the coding interview:

What important property of a n*n grid can we use to make this program work in O(n^2) time and O(1) space. If the space is constant,
the rotation should happen in place (which is the whole point of this problem).

|1   2  3  4|            |13 9  5 1|
|5   6  7  8|    ----    |14 10 6 2|  
|9  10 11 12|    ----    |15 11 7 3|
|13 14 15 16|            |16 12 8 4|

using the property of symmetricity:

00 01 02 03  .. example, put the element on 00 in 30 and then put it in 03.
10 11 12 13
20 21 22 23
30 31 32 33

public void rotate(int[][] matrix) {
	int n = matrix.length;
	for (int i = 0; i < n / 2; i++) {
		for (int j = 0; j < Math.ceil(((double) n) / 2.); j++) {
			int temp = matrix[i][j];
			matrix[i][j] = matrix[n-1-j][i];
			matrix[n-1-j][i] = matrix[n-1-i][n-1-j];
			matrix[n-1-i][n-1-j] = matrix[j][n-1-i];
			matrix[j][n-1-i] = temp;
		}
	}
}
