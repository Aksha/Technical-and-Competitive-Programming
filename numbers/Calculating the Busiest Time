The Westfield Mall management is trying to figure out what the busiest moment at the mall was last year. 
You’re given data extracted from the mall’s door detectors. Each data point is represented as an integer
array whose size is 3. The values at indices 0, 1 and 2 are the timestamp, the count of visitors, and whether
the visitors entered or exited the mall (0 for exit and 1 for entrance), respectively. Here’s an example of a
data point: [ 1440084737, 4, 0 ].

Note that time is given in a Unix format called Epoch, which is a nonnegative integer holding the number
of seconds that have elapsed since 00:00:00 UTC, Thursday, 1 January 1970.

Given an array, data, of data points, write a function findBusiestPeriod that returns the time at which
the mall reached its busiest moment last year. The return value is the timestamp, e.g. 1480640292. Note 
that if there is more than one period with the same visitor peak, return the earliest one.

Explain your solution and analyze its time and space complexities.

--------------------------------------------------------------------------------------------------------------------
Solution in Python: time complexity: O(n); space complexity: O(1)
--------------------------------------------------------------------------------------------------------------------
function findBusiestPeriod(data):
    n = data.length
    count = 0
    maxCount = 0
    maxPeriodTime = 0

    for i from 0 to n-1:
        # update count
        if (data[i][2] == 1): # visitors entered the mall  
            count += data[i][1]
        else if (data[i][2] == 0): # visitors existed the mall
            count -= data[i][1]

        # check for other data points with the same timestamp
        if (i < n-1 AND data[i][0] == data[i+1][0]):
            continue

        # update maximum
        if (count > maxCount):
            maxCount = count
            maxPeriodTime = data[i][0]

    return maxPeriodTime
    
--------------------------------------------------------------------------------------------------------------------
Solution in C++: time complexity: O(n); space complexity: O(1)
--------------------------------------------------------------------------------------------------------------------

int findBusiestPeriod(vector<vector<int> > &data) {
  int count = 0;
  int maximum = INT_MIN;
  int result;
  // your code goes here
  for(int i = 0; i < data.size() - 1; i++){ // i = data.size()-1 // i++ => ++i
    count = (data[i][2] == 1) ? count + data[i][1] : count - data[i][1];
    if(data[i][0] == data[i+1][0])
        continue;
    if(count > maximum){
        maximum = count;
        result = data[i][0]
    }
    count = 0;
  }
  return result;
}
  
  
  #include <iostream>
#include <vector>
#include <limits>

using namespace std;
/* 
 for every data point in the array,
 if the current timestamp and next time stamp are similar
 calculate the number of people in the mall by adding or subtracting 
 according to the value given in data[index][2].
 update maxvalue if the value calculated is more than that. 
 The max value should be the time stamp.
 
 
*/
int findBusiestPeriod( const vector<vector<int> >& data ) 
{
  int maxVal = INT_MIN;
  int currentVal = 0;
  int maxTimeStamp = -1;
  for(int i = 0; i < data.size(); i++){
    if(data[i][2] == 1)
      currentVal += data[i][1];
    else if(data[i][2] == 0)
      currentVal -= data[i][1];
    
    if(i+1 < data.size() && data[i+1][0] == data[i][0])
      continue;
    
    if(maxVal < currentVal){
      maxVal = currentVal;
      maxTimeStamp = data[i][0];
    }
  }
  return maxTimeStamp;
}

int main() {
  vector <vector <int>> data = {{1487799425, 14, 1}, 
                 {1487799425, 4,  0},
                 {1487799425, 2,  0},
                 {1487800378, 10, 1},
                 {1487801478, 18, 0},
                 {1487801478, 18, 1},
                 {1487901013, 1,  0},
                 {1487901211, 7,  1},
                 {1487901211, 7,  0} };
  
  cout << findBusiestPeriod(data) << endl;
  return 0;
}
/*1pm-5enter
2 pm - 3 exit
3 pm -5 enter
at 3pm there are 7 people*/
