  There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?

Solution: My first attempt was a O(n^2) time and O(n) space solution with minor bugs:

int candyCount(vector <int> input){
    int totalCount = 0;
    int count[input.size()] = {1};
    for(int i = 1; i < input.size(); i++){
        if(input[i] < input[i-1]){
            while(input[i] <= input[i-1]){
                if(input[i] < input[i-1] && count[i-1] <= count[i] ){
                    count[i-1] = count[i] + 1;
                else if(input[i-1] == input[1]
                  count[i-1] = count[i];
                i--;
            }
        }
        else if(input[i-1] == input[i])
            count[i] = count[i-1];
        else if(input[i] > input[i-1])
            count[i] = count[i-1] + 1;
        
    }
    for(int i = 0; i < count.size(); i++){
        totalCount += count[i];
    }
    return totalCount;
}

Better solution: My improved solution has O(n) time and space complexity.

Here's the explanation:
We take ratings array as [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]
In the given problem each student will have at least 1 candy. So distribute 1 candy to each.

ratings:     [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]
candies:     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Now traverse the array from left to right. If the rating of (n+1) child is greater than (n) child then set the candy of (n+1) child as one candy more than the (n) child candies.

ratings:     [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]
candies:     [1, 2, 1, 1, 2, 3, 4, 1, 1, 1, 2, 1]
Now traverse the array from right to left. If the (n) child rating is more than (n+1) child and (n) child candies is less than one more than (n+1) child candies then update the candies of (n) child as 1+ (n+1) candies.

ratings:     [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]
candies:     [1, 2, 1, 1, 2, 3, 4, 3, 2, 1, 2, 1]
Total minimum candies: 23
  
  int candy(vector<int>& ratings) {
        int totalCount = 0;
        //vector<int> candies(ratings.size(),1);
        int candies[ratings.size()];
        fill_n(candies,ratings.size(),1);
        for(int i = 0; i < ratings.size();i++){
            if(ratings[i] < ratings[i+1]) candies[i+1] = candies[i] + 1;
        }
        
        for(int i = ratings.size() - 2; i >= 0; i--){
            if(ratings[i+1] < ratings[i] && candies[i] <= candies[i+1]) candies[i] = candies[i+1] + 1;
        }
        
        for(int n:candies){
            cout << n << endl;
            totalCount += n;
        }
        
        return totalCount;
    }

Some more reference: 
https://leetcode.com/problems/candy/discuss/ 
