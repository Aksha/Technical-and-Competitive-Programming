//Why won't this work?:

vector<long> arrayOfArrayProducts(const vector<int>& arr) 
{
  int n = arr.size();
  //vector<long> empty;
  if(n == 0 || n == 1) {
    return {};
  }
  long product = 1;
  for(int i = 0; i < n; i++ ) {
    product *= arr[i];
  }
  vector<long> res(arr.size(), product);
  for(int i = 0; i < arr.size(); i++) {
    if(arr[i] != 0)
      res[i] /= arr[i];
    else 
      res[i] = 0;
  }
  // your code goes here

  return res;
}

/*
Don't use the divide operator. Won't work for the following example:
Input: 
[2,3,0,982,10]
Expected:
[0,0,58920,0,0]
Actual: 
[ 0, 0, 0, 0, 0 ]
*/

// The following solution is more stable: 

function calcProductArray(arr):
    n = arr.length
    if(n == 0 OR n == 1):
        # no values to multiply if n equals to 0 or 1
        return []

    productArr = []
    product = 1
    for i from 0 to n-1:
        productArr[i] = product
        product *= arr[i]

    product = 1
    for i from n-1 to 0:
        productArr[i] *= product
        product *= arr[i]

    return productArr


